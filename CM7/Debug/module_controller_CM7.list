
module_controller_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003898  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003b30  08003b30  00004b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b40  08003b40  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003b40  08003b40  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b40  08003b40  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b40  08003b40  00004b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003b44  08003b44  00004b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08003b48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  24000010  08003b58  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000bc  08003b58  000050bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b553  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c2e  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  000121c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075b  00000000  00000000  00012ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000386ec  00000000  00000000  000132fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ceda  00000000  00000000  0004b9e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00174441  00000000  00000000  000588c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ccd02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002750  00000000  00000000  001ccd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001cf498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003b18 	.word	0x08003b18

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003b18 	.word	0x08003b18

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800040a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800040e:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000410:	bf00      	nop
 8000412:	4b27      	ldr	r3, [pc, #156]	@ (80004b0 <main+0xac>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d004      	beq.n	8000428 <main+0x24>
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	60fa      	str	r2, [r7, #12]
 8000424:	2b00      	cmp	r3, #0
 8000426:	dcf4      	bgt.n	8000412 <main+0xe>
  if ( timeout < 0 )
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	2b00      	cmp	r3, #0
 800042c:	da01      	bge.n	8000432 <main+0x2e>
  {
  Error_Handler();
 800042e:	f000 f9cf 	bl	80007d0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 fb2f 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f83d 	bl	80004b4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800043a:	4b1d      	ldr	r3, [pc, #116]	@ (80004b0 <main+0xac>)
 800043c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000440:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <main+0xac>)
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000446:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800044a:	4b19      	ldr	r3, [pc, #100]	@ (80004b0 <main+0xac>)
 800044c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000458:	2000      	movs	r0, #0
 800045a:	f000 fe71 	bl	8001140 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800045e:	2100      	movs	r1, #0
 8000460:	2000      	movs	r0, #0
 8000462:	f000 fe87 	bl	8001174 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800046a:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800046c:	bf00      	nop
 800046e:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <main+0xac>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <main+0x80>
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	1e5a      	subs	r2, r3, #1
 800047e:	60fa      	str	r2, [r7, #12]
 8000480:	2b00      	cmp	r3, #0
 8000482:	dcf4      	bgt.n	800046e <main+0x6a>
if ( timeout < 0 )
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	2b00      	cmp	r3, #0
 8000488:	da01      	bge.n	800048e <main+0x8a>
{
Error_Handler();
 800048a:	f000 f9a1 	bl	80007d0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f8e5 	bl	800065c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000492:	f000 f88d 	bl	80005b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  //AD5544_Init();
  //AD7533_Init();
  //ADG508_Init();  // MUX aktif
  //ADG506_Init();
  MX574_Init();
 8000496:	f000 f9a1 	bl	80007dc <MX574_Init>
	  //    HAL_Delay(500);
	  //}


	  // MX574
	  uint16_t adc_result = MX574_Read12Bit();
 800049a:	f000 f9bd 	bl	8000818 <MX574_Read12Bit>
 800049e:	4603      	mov	r3, r0
 80004a0:	817b      	strh	r3, [r7, #10]
	  HAL_Delay(1000);
 80004a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004a6:	f000 fb87 	bl	8000bb8 <HAL_Delay>
  {
 80004aa:	bf00      	nop
 80004ac:	e7f5      	b.n	800049a <main+0x96>
 80004ae:	bf00      	nop
 80004b0:	58024400 	.word	0x58024400

080004b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b09c      	sub	sp, #112	@ 0x70
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004be:	224c      	movs	r2, #76	@ 0x4c
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f003 fafb 	bl	8003abe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2220      	movs	r2, #32
 80004cc:	2100      	movs	r1, #0
 80004ce:	4618      	mov	r0, r3
 80004d0:	f003 faf5 	bl	8003abe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004d4:	2004      	movs	r0, #4
 80004d6:	f000 fe61 	bl	800119c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004da:	2300      	movs	r3, #0
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	4b32      	ldr	r3, [pc, #200]	@ (80005a8 <SystemClock_Config+0xf4>)
 80004e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004e2:	4a31      	ldr	r2, [pc, #196]	@ (80005a8 <SystemClock_Config+0xf4>)
 80004e4:	f023 0301 	bic.w	r3, r3, #1
 80004e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004ea:	4b2f      	ldr	r3, [pc, #188]	@ (80005a8 <SystemClock_Config+0xf4>)
 80004ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ee:	f003 0301 	and.w	r3, r3, #1
 80004f2:	603b      	str	r3, [r7, #0]
 80004f4:	4b2d      	ldr	r3, [pc, #180]	@ (80005ac <SystemClock_Config+0xf8>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004fc:	4a2b      	ldr	r2, [pc, #172]	@ (80005ac <SystemClock_Config+0xf8>)
 80004fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b29      	ldr	r3, [pc, #164]	@ (80005ac <SystemClock_Config+0xf8>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000510:	bf00      	nop
 8000512:	4b26      	ldr	r3, [pc, #152]	@ (80005ac <SystemClock_Config+0xf8>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800051a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800051e:	d1f8      	bne.n	8000512 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000520:	2301      	movs	r3, #1
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000524:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000528:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052a:	2302      	movs	r3, #2
 800052c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052e:	2302      	movs	r3, #2
 8000530:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000536:	2312      	movs	r3, #18
 8000538:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800053a:	2302      	movs	r3, #2
 800053c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800053e:	2302      	movs	r3, #2
 8000540:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000542:	2302      	movs	r3, #2
 8000544:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000546:	230c      	movs	r3, #12
 8000548:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 800054a:	2302      	movs	r3, #2
 800054c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 800054e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000552:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fe79 	bl	8001250 <HAL_RCC_OscConfig>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000564:	f000 f934 	bl	80007d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000568:	233f      	movs	r3, #63	@ 0x3f
 800056a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056c:	2303      	movs	r3, #3
 800056e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000578:	2340      	movs	r3, #64	@ 0x40
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800057c:	2340      	movs	r3, #64	@ 0x40
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000584:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000586:	2340      	movs	r3, #64	@ 0x40
 8000588:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2101      	movs	r1, #1
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fab8 	bl	8001b04 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800059a:	f000 f919 	bl	80007d0 <Error_Handler>
  }
}
 800059e:	bf00      	nop
 80005a0:	3770      	adds	r7, #112	@ 0x70
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	58000400 	.word	0x58000400
 80005ac:	58024800 	.word	0x58024800

080005b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005b4:	4b27      	ldr	r3, [pc, #156]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005b6:	4a28      	ldr	r2, [pc, #160]	@ (8000658 <MX_SPI1_Init+0xa8>)
 80005b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ba:	4b26      	ldr	r3, [pc, #152]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80005c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c2:	4b24      	ldr	r3, [pc, #144]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80005c8:	4b22      	ldr	r3, [pc, #136]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005ca:	2203      	movs	r2, #3
 80005cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ce:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005da:	4b1e      	ldr	r3, [pc, #120]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80005e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f4:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80005fa:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <MX_SPI1_Init+0xa4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000600:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <MX_SPI1_Init+0xa4>)
 8000602:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000606:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <MX_SPI1_Init+0xa4>)
 800060a:	2200      	movs	r2, #0
 800060c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800060e:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_SPI1_Init+0xa4>)
 8000610:	2200      	movs	r2, #0
 8000612:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <MX_SPI1_Init+0xa4>)
 8000616:	2200      	movs	r2, #0
 8000618:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_SPI1_Init+0xa4>)
 800061c:	2200      	movs	r2, #0
 800061e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_SPI1_Init+0xa4>)
 8000622:	2200      	movs	r2, #0
 8000624:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <MX_SPI1_Init+0xa4>)
 8000628:	2200      	movs	r2, #0
 800062a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_SPI1_Init+0xa4>)
 800062e:	2200      	movs	r2, #0
 8000630:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000632:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <MX_SPI1_Init+0xa4>)
 8000634:	2200      	movs	r2, #0
 8000636:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_SPI1_Init+0xa4>)
 800063a:	2200      	movs	r2, #0
 800063c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MX_SPI1_Init+0xa4>)
 8000640:	f003 f8fe 	bl	8003840 <HAL_SPI_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 800064a:	f000 f8c1 	bl	80007d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	2400002c 	.word	0x2400002c
 8000658:	40013000 	.word	0x40013000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b55      	ldr	r3, [pc, #340]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000668:	4a53      	ldr	r2, [pc, #332]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 800066a:	f043 0301 	orr.w	r3, r3, #1
 800066e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000672:	4b51      	ldr	r3, [pc, #324]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 8000674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	693b      	ldr	r3, [r7, #16]

/* USER CODE BEGIN MX_GPIO_Init_2 */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4b4d      	ldr	r3, [pc, #308]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a4c      	ldr	r2, [pc, #304]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b49      	ldr	r3, [pc, #292]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800069e:	4b46      	ldr	r3, [pc, #280]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a4:	4a44      	ldr	r2, [pc, #272]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ae:	4b42      	ldr	r3, [pc, #264]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b4:	f003 0310 	and.w	r3, r3, #16
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	4b3e      	ldr	r3, [pc, #248]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c2:	4a3d      	ldr	r2, [pc, #244]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006cc:	4b3a      	ldr	r3, [pc, #232]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006da:	4b37      	ldr	r3, [pc, #220]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e0:	4a35      	ldr	r2, [pc, #212]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ea:	4b33      	ldr	r3, [pc, #204]	@ (80007b8 <MX_GPIO_Init+0x15c>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f0:	f003 0308 	and.w	r3, r3, #8
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f8:	f107 0314 	add.w	r3, r7, #20
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 8000708:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4826      	ldr	r0, [pc, #152]	@ (80007bc <MX_GPIO_Init+0x160>)
 8000722:	f000 fb5d 	bl	8000de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000726:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800072a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4823      	ldr	r0, [pc, #140]	@ (80007c0 <MX_GPIO_Init+0x164>)
 8000734:	f000 fb54 	bl	8000de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8000738:	237c      	movs	r3, #124	@ 0x7c
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	481d      	ldr	r0, [pc, #116]	@ (80007c4 <MX_GPIO_Init+0x168>)
 8000750:	f000 fb46 	bl	8000de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |
 8000754:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000758:	617b      	str	r3, [r7, #20]
                        GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	4619      	mov	r1, r3
 8000768:	4817      	ldr	r0, [pc, #92]	@ (80007c8 <MX_GPIO_Init+0x16c>)
 800076a:	f000 fb39 	bl	8000de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 800076e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	4619      	mov	r1, r3
 800077a:	4814      	ldr	r0, [pc, #80]	@ (80007cc <MX_GPIO_Init+0x170>)
 800077c:	f000 fb30 	bl	8000de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000780:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	480a      	ldr	r0, [pc, #40]	@ (80007c4 <MX_GPIO_Init+0x168>)
 800079a:	f000 fb21 	bl	8000de0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 800079e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4808      	ldr	r0, [pc, #32]	@ (80007cc <MX_GPIO_Init+0x170>)
 80007ac:	f000 fb18 	bl	8000de0 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80007b0:	bf00      	nop
 80007b2:	3728      	adds	r7, #40	@ 0x28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	58024400 	.word	0x58024400
 80007bc:	58020800 	.word	0x58020800
 80007c0:	58020000 	.word	0x58020000
 80007c4:	58021000 	.word	0x58021000
 80007c8:	58020c00 	.word	0x58020c00
 80007cc:	58020400 	.word	0x58020400

080007d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d4:	b672      	cpsid	i
}
 80007d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d8:	bf00      	nop
 80007da:	e7fd      	b.n	80007d8 <Error_Handler+0x8>

080007dc <MX574_Init>:
    GPIO_PIN_11, GPIO_PIN_10, GPIO_PIN_9, GPIO_PIN_8,
    GPIO_PIN_15, GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_12
};

void MX574_Init(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
    // 12-bit modda çalış (data_mode HIGH)
    MX574_DATA_MODE_Port->ODR |= MX574_DATA_MODE_Pin;
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <MX574_Init+0x34>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000810 <MX574_Init+0x34>)
 80007e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ea:	6153      	str	r3, [r2, #20]

    // CE HIGH – devre dışı
    MX574_CE_Port->ODR |= MX574_CE_Pin;
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <MX574_Init+0x34>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <MX574_Init+0x34>)
 80007f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007f6:	6153      	str	r3, [r2, #20]

    // CS HIGH – devre dışı
    MX574_CS_Port->ODR |= MX574_CS_Pin;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <MX574_Init+0x38>)
 80007fa:	695b      	ldr	r3, [r3, #20]
 80007fc:	4a05      	ldr	r2, [pc, #20]	@ (8000814 <MX574_Init+0x38>)
 80007fe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000802:	6153      	str	r3, [r2, #20]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	58021000 	.word	0x58021000
 8000814:	58020400 	.word	0x58020400

08000818 <MX574_Read12Bit>:

uint16_t MX574_Read12Bit(void) {
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
    uint16_t result = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	80fb      	strh	r3, [r7, #6]

    // Dönüşüm başlat
    MX574_CS_Port->ODR &= ~MX574_CS_Pin;
 8000822:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <MX574_Read12Bit+0xb8>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a2a      	ldr	r2, [pc, #168]	@ (80008d0 <MX574_Read12Bit+0xb8>)
 8000828:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800082c:	6153      	str	r3, [r2, #20]
    MX574_RC_Port->ODR &= ~MX574_RC_Pin;
 800082e:	4b28      	ldr	r3, [pc, #160]	@ (80008d0 <MX574_Read12Bit+0xb8>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a27      	ldr	r2, [pc, #156]	@ (80008d0 <MX574_Read12Bit+0xb8>)
 8000834:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000838:	6153      	str	r3, [r2, #20]
    MX574_CE_Port->ODR &= ~MX574_CE_Pin;
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <MX574_Read12Bit+0xbc>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a25      	ldr	r2, [pc, #148]	@ (80008d4 <MX574_Read12Bit+0xbc>)
 8000840:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000844:	6153      	str	r3, [r2, #20]
    for (volatile int i = 0; i < 1000; i++);  // kısa gecikme
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	e002      	b.n	8000852 <MX574_Read12Bit+0x3a>
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	3301      	adds	r3, #1
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000858:	dbf8      	blt.n	800084c <MX574_Read12Bit+0x34>
    MX574_CE_Port->ODR |= MX574_CE_Pin;
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <MX574_Read12Bit+0xbc>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	4a1d      	ldr	r2, [pc, #116]	@ (80008d4 <MX574_Read12Bit+0xbc>)
 8000860:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000864:	6153      	str	r3, [r2, #20]

    // Veri okuma
    MX574_RC_Port->ODR |= MX574_RC_Pin;
 8000866:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX574_Read12Bit+0xb8>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a19      	ldr	r2, [pc, #100]	@ (80008d0 <MX574_Read12Bit+0xb8>)
 800086c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000870:	6153      	str	r3, [r2, #20]
    MX574_CS_Port->ODR &= ~MX574_CS_Pin;
 8000872:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX574_Read12Bit+0xb8>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a16      	ldr	r2, [pc, #88]	@ (80008d0 <MX574_Read12Bit+0xb8>)
 8000878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800087c:	6153      	str	r3, [r2, #20]
    MX574_A0_Port->ODR &= ~MX574_A0_Pin;  // MSB (A0 = 0)
 800087e:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX574_Read12Bit+0xbc>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <MX574_Read12Bit+0xbc>)
 8000884:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000888:	6153      	str	r3, [r2, #20]
    MX574_CE_Port->ODR &= ~MX574_CE_Pin;
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX574_Read12Bit+0xbc>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	4a11      	ldr	r2, [pc, #68]	@ (80008d4 <MX574_Read12Bit+0xbc>)
 8000890:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000894:	6153      	str	r3, [r2, #20]

	return result;
	*/

    static uint16_t fake_result = 0;																																			// TEST AMACLI, SILINECEK
    fake_result += 341; // 341 x 12 = ~4092 (12 adımdan sonra sıfırlanır)
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <MX574_Read12Bit+0xc0>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	f203 1355 	addw	r3, r3, #341	@ 0x155
 800089e:	b29a      	uxth	r2, r3
 80008a0:	4b0d      	ldr	r3, [pc, #52]	@ (80008d8 <MX574_Read12Bit+0xc0>)
 80008a2:	801a      	strh	r2, [r3, #0]
    if (fake_result > 4095) fake_result = 0;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <MX574_Read12Bit+0xc0>)
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008ac:	d302      	bcc.n	80008b4 <MX574_Read12Bit+0x9c>
 80008ae:	4b0a      	ldr	r3, [pc, #40]	@ (80008d8 <MX574_Read12Bit+0xc0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	801a      	strh	r2, [r3, #0]

    MX574_CE_Port->ODR |= MX574_CE_Pin;
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <MX574_Read12Bit+0xbc>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	4a06      	ldr	r2, [pc, #24]	@ (80008d4 <MX574_Read12Bit+0xbc>)
 80008ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008be:	6153      	str	r3, [r2, #20]

    return fake_result;
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <MX574_Read12Bit+0xc0>)
 80008c2:	881b      	ldrh	r3, [r3, #0]

}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr
 80008d0:	58020400 	.word	0x58020400
 80008d4:	58021000 	.word	0x58021000
 80008d8:	240000b4 	.word	0x240000b4

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_MspInit+0x30>)
 80008e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008e8:	4a08      	ldr	r2, [pc, #32]	@ (800090c <HAL_MspInit+0x30>)
 80008ea:	f043 0302 	orr.w	r3, r3, #2
 80008ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <HAL_MspInit+0x30>)
 80008f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	58024400 	.word	0x58024400

08000910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0ba      	sub	sp, #232	@ 0xe8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	22c0      	movs	r2, #192	@ 0xc0
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f003 f8c4 	bl	8003abe <memset>
  if(hspi->Instance==SPI1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a26      	ldr	r2, [pc, #152]	@ (80009d4 <HAL_SPI_MspInit+0xc4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d144      	bne.n	80009ca <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000940:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000944:	f04f 0300 	mov.w	r3, #0
 8000948:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800094c:	2300      	movs	r3, #0
 800094e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fc05 	bl	8002164 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000960:	f7ff ff36 	bl	80007d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000964:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <HAL_SPI_MspInit+0xc8>)
 8000966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800096a:	4a1b      	ldr	r2, [pc, #108]	@ (80009d8 <HAL_SPI_MspInit+0xc8>)
 800096c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000970:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000974:	4b18      	ldr	r3, [pc, #96]	@ (80009d8 <HAL_SPI_MspInit+0xc8>)
 8000976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800097a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <HAL_SPI_MspInit+0xc8>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	4a13      	ldr	r2, [pc, #76]	@ (80009d8 <HAL_SPI_MspInit+0xc8>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <HAL_SPI_MspInit+0xc8>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009a0:	23e0      	movs	r3, #224	@ 0xe0
 80009a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009b8:	2305      	movs	r3, #5
 80009ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	@ (80009dc <HAL_SPI_MspInit+0xcc>)
 80009c6:	f000 fa0b 	bl	8000de0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009ca:	bf00      	nop
 80009cc:	37e8      	adds	r7, #232	@ 0xe8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40013000 	.word	0x40013000
 80009d8:	58024400 	.word	0x58024400
 80009dc:	58020000 	.word	0x58020000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <NMI_Handler+0x4>

080009e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a36:	f000 f89f 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a44:	f7ff fc48 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a48:	480c      	ldr	r0, [pc, #48]	@ (8000a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4a:	490d      	ldr	r1, [pc, #52]	@ (8000a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a50:	e002      	b.n	8000a58 <LoopCopyDataInit>

08000a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a56:	3304      	adds	r3, #4

08000a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a5c:	d3f9      	bcc.n	8000a52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a60:	4c0a      	ldr	r4, [pc, #40]	@ (8000a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a64:	e001      	b.n	8000a6a <LoopFillZerobss>

08000a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a68:	3204      	adds	r2, #4

08000a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a6c:	d3fb      	bcc.n	8000a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a6e:	f003 f82f 	bl	8003ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a72:	f7ff fcc7 	bl	8000404 <main>
  bx  lr
 8000a76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a80:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a84:	08003b48 	.word	0x08003b48
  ldr r2, =_sbss
 8000a88:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a8c:	240000bc 	.word	0x240000bc

08000a90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC3_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f000 f96e 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000aa0:	f001 f9e6 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	4b15      	ldr	r3, [pc, #84]	@ (8000afc <HAL_Init+0x68>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	0a1b      	lsrs	r3, r3, #8
 8000aac:	f003 030f 	and.w	r3, r3, #15
 8000ab0:	4913      	ldr	r1, [pc, #76]	@ (8000b00 <HAL_Init+0x6c>)
 8000ab2:	5ccb      	ldrb	r3, [r1, r3]
 8000ab4:	f003 031f 	and.w	r3, r3, #31
 8000ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8000abc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000abe:	4b0f      	ldr	r3, [pc, #60]	@ (8000afc <HAL_Init+0x68>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b00 <HAL_Init+0x6c>)
 8000ac8:	5cd3      	ldrb	r3, [r2, r3]
 8000aca:	f003 031f 	and.w	r3, r3, #31
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8000b04 <HAL_Init+0x70>)
 8000ad6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <HAL_Init+0x74>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 f814 	bl	8000b0c <HAL_InitTick>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e002      	b.n	8000af4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000aee:	f7ff fef5 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	58024400 	.word	0x58024400
 8000b00:	08003b30 	.word	0x08003b30
 8000b04:	24000004 	.word	0x24000004
 8000b08:	24000000 	.word	0x24000000

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <HAL_InitTick+0x60>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d101      	bne.n	8000b20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	e021      	b.n	8000b64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <HAL_InitTick+0x64>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <HAL_InitTick+0x60>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f945 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00e      	b.n	8000b64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d80a      	bhi.n	8000b62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295
 8000b54:	f000 f91d 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <HAL_InitTick+0x68>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2400000c 	.word	0x2400000c
 8000b70:	24000000 	.word	0x24000000
 8000b74:	24000008 	.word	0x24000008

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	2400000c 	.word	0x2400000c
 8000b9c:	240000b8 	.word	0x240000b8

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	240000b8 	.word	0x240000b8

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff ffee 	bl	8000ba0 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <HAL_Delay+0x44>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bde:	bf00      	nop
 8000be0:	f7ff ffde 	bl	8000ba0 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2400000c 	.word	0x2400000c

08000c00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c04:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <HAL_GetREVID+0x14>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	0c1b      	lsrs	r3, r3, #16
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	5c001000 	.word	0x5c001000

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0b      	ldr	r3, [pc, #44]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x40>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c40:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x40>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00
 8000c5c:	05fa0000 	.word	0x05fa0000

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	@ (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	@ (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	88fb      	ldrh	r3, [r7, #6]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	@ 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	@ 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	@ (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff47 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da0:	f7ff ff5e 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000da4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6978      	ldr	r0, [r7, #20]
 8000dac:	f7ff ff90 	bl	8000cd0 <NVIC_EncodePriority>
 8000db0:	4602      	mov	r2, r0
 8000db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff5f 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffb2 	bl	8000d38 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b089      	sub	sp, #36	@ 0x24
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000dee:	4b89      	ldr	r3, [pc, #548]	@ (8001014 <HAL_GPIO_Init+0x234>)
 8000df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000df2:	e194      	b.n	800111e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f000 8186 	beq.w	8001118 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x44>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	f003 0201 	and.w	r2, r3, #1
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f003 0303 	and.w	r3, r3, #3
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d017      	beq.n	8000ec2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d123      	bne.n	8000f16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	f003 0307 	and.w	r3, r3, #7
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	69b9      	ldr	r1, [r7, #24]
 8000f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0203 	and.w	r2, r3, #3
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 80e0 	beq.w	8001118 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b2f      	ldr	r3, [pc, #188]	@ (8001018 <HAL_GPIO_Init+0x238>)
 8000f5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8001018 <HAL_GPIO_Init+0x238>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f68:	4b2b      	ldr	r3, [pc, #172]	@ (8001018 <HAL_GPIO_Init+0x238>)
 8000f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f76:	4a29      	ldr	r2, [pc, #164]	@ (800101c <HAL_GPIO_Init+0x23c>)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a20      	ldr	r2, [pc, #128]	@ (8001020 <HAL_GPIO_Init+0x240>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d052      	beq.n	8001048 <HAL_GPIO_Init+0x268>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8001024 <HAL_GPIO_Init+0x244>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d031      	beq.n	800100e <HAL_GPIO_Init+0x22e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a1e      	ldr	r2, [pc, #120]	@ (8001028 <HAL_GPIO_Init+0x248>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d02b      	beq.n	800100a <HAL_GPIO_Init+0x22a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800102c <HAL_GPIO_Init+0x24c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d025      	beq.n	8001006 <HAL_GPIO_Init+0x226>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a1c      	ldr	r2, [pc, #112]	@ (8001030 <HAL_GPIO_Init+0x250>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d01f      	beq.n	8001002 <HAL_GPIO_Init+0x222>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001034 <HAL_GPIO_Init+0x254>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d019      	beq.n	8000ffe <HAL_GPIO_Init+0x21e>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001038 <HAL_GPIO_Init+0x258>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d013      	beq.n	8000ffa <HAL_GPIO_Init+0x21a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	@ (800103c <HAL_GPIO_Init+0x25c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d00d      	beq.n	8000ff6 <HAL_GPIO_Init+0x216>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a18      	ldr	r2, [pc, #96]	@ (8001040 <HAL_GPIO_Init+0x260>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d007      	beq.n	8000ff2 <HAL_GPIO_Init+0x212>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <HAL_GPIO_Init+0x264>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_GPIO_Init+0x20e>
 8000fea:	2309      	movs	r3, #9
 8000fec:	e02d      	b.n	800104a <HAL_GPIO_Init+0x26a>
 8000fee:	230a      	movs	r3, #10
 8000ff0:	e02b      	b.n	800104a <HAL_GPIO_Init+0x26a>
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	e029      	b.n	800104a <HAL_GPIO_Init+0x26a>
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	e027      	b.n	800104a <HAL_GPIO_Init+0x26a>
 8000ffa:	2306      	movs	r3, #6
 8000ffc:	e025      	b.n	800104a <HAL_GPIO_Init+0x26a>
 8000ffe:	2305      	movs	r3, #5
 8001000:	e023      	b.n	800104a <HAL_GPIO_Init+0x26a>
 8001002:	2304      	movs	r3, #4
 8001004:	e021      	b.n	800104a <HAL_GPIO_Init+0x26a>
 8001006:	2303      	movs	r3, #3
 8001008:	e01f      	b.n	800104a <HAL_GPIO_Init+0x26a>
 800100a:	2302      	movs	r3, #2
 800100c:	e01d      	b.n	800104a <HAL_GPIO_Init+0x26a>
 800100e:	2301      	movs	r3, #1
 8001010:	e01b      	b.n	800104a <HAL_GPIO_Init+0x26a>
 8001012:	bf00      	nop
 8001014:	58000080 	.word	0x58000080
 8001018:	58024400 	.word	0x58024400
 800101c:	58000400 	.word	0x58000400
 8001020:	58020000 	.word	0x58020000
 8001024:	58020400 	.word	0x58020400
 8001028:	58020800 	.word	0x58020800
 800102c:	58020c00 	.word	0x58020c00
 8001030:	58021000 	.word	0x58021000
 8001034:	58021400 	.word	0x58021400
 8001038:	58021800 	.word	0x58021800
 800103c:	58021c00 	.word	0x58021c00
 8001040:	58022000 	.word	0x58022000
 8001044:	58022400 	.word	0x58022400
 8001048:	2300      	movs	r3, #0
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	f002 0203 	and.w	r2, r2, #3
 8001050:	0092      	lsls	r2, r2, #2
 8001052:	4093      	lsls	r3, r2
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105a:	4938      	ldr	r1, [pc, #224]	@ (800113c <HAL_GPIO_Init+0x35c>)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800108e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80010bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	3301      	adds	r3, #1
 800111c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	f47f ae63 	bne.w	8000df4 <HAL_GPIO_Init+0x14>
  }
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3724      	adds	r7, #36	@ 0x24
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	58000400 	.word	0x58000400

08001140 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001148:	4a08      	ldr	r2, [pc, #32]	@ (800116c <HAL_HSEM_FastTake+0x2c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3320      	adds	r3, #32
 800114e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001152:	4a07      	ldr	r2, [pc, #28]	@ (8001170 <HAL_HSEM_FastTake+0x30>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001158:	2300      	movs	r3, #0
 800115a:	e000      	b.n	800115e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	58026400 	.word	0x58026400
 8001170:	80000300 	.word	0x80000300

08001174 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800117e:	4906      	ldr	r1, [pc, #24]	@ (8001198 <HAL_HSEM_Release+0x24>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	58026400 	.word	0x58026400

0800119c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80011a4:	4b29      	ldr	r3, [pc, #164]	@ (800124c <HAL_PWREx_ConfigSupply+0xb0>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	2b06      	cmp	r3, #6
 80011ae:	d00a      	beq.n	80011c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80011b0:	4b26      	ldr	r3, [pc, #152]	@ (800124c <HAL_PWREx_ConfigSupply+0xb0>)
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d001      	beq.n	80011c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e040      	b.n	8001244 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e03e      	b.n	8001244 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80011c6:	4b21      	ldr	r3, [pc, #132]	@ (800124c <HAL_PWREx_ConfigSupply+0xb0>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80011ce:	491f      	ldr	r1, [pc, #124]	@ (800124c <HAL_PWREx_ConfigSupply+0xb0>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80011d6:	f7ff fce3 	bl	8000ba0 <HAL_GetTick>
 80011da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011dc:	e009      	b.n	80011f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80011de:	f7ff fcdf 	bl	8000ba0 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011ec:	d901      	bls.n	80011f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e028      	b.n	8001244 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80011f2:	4b16      	ldr	r3, [pc, #88]	@ (800124c <HAL_PWREx_ConfigSupply+0xb0>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011fe:	d1ee      	bne.n	80011de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b1e      	cmp	r3, #30
 8001204:	d008      	beq.n	8001218 <HAL_PWREx_ConfigSupply+0x7c>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b2e      	cmp	r3, #46	@ 0x2e
 800120a:	d005      	beq.n	8001218 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b1d      	cmp	r3, #29
 8001210:	d002      	beq.n	8001218 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b2d      	cmp	r3, #45	@ 0x2d
 8001216:	d114      	bne.n	8001242 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001218:	f7ff fcc2 	bl	8000ba0 <HAL_GetTick>
 800121c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800121e:	e009      	b.n	8001234 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001220:	f7ff fcbe 	bl	8000ba0 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800122e:	d901      	bls.n	8001234 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e007      	b.n	8001244 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001234:	4b05      	ldr	r3, [pc, #20]	@ (800124c <HAL_PWREx_ConfigSupply+0xb0>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800123c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001240:	d1ee      	bne.n	8001220 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58024800 	.word	0x58024800

08001250 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	@ 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	f000 bc48 	b.w	8001af4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 8088 	beq.w	8001382 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001272:	4b99      	ldr	r3, [pc, #612]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800127a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800127c:	4b96      	ldr	r3, [pc, #600]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 800127e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001280:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001284:	2b10      	cmp	r3, #16
 8001286:	d007      	beq.n	8001298 <HAL_RCC_OscConfig+0x48>
 8001288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800128a:	2b18      	cmp	r3, #24
 800128c:	d111      	bne.n	80012b2 <HAL_RCC_OscConfig+0x62>
 800128e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d10c      	bne.n	80012b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001298:	4b8f      	ldr	r3, [pc, #572]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d06d      	beq.n	8001380 <HAL_RCC_OscConfig+0x130>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d169      	bne.n	8001380 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f000 bc21 	b.w	8001af4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ba:	d106      	bne.n	80012ca <HAL_RCC_OscConfig+0x7a>
 80012bc:	4b86      	ldr	r3, [pc, #536]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a85      	ldr	r2, [pc, #532]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80012c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e02e      	b.n	8001328 <HAL_RCC_OscConfig+0xd8>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_RCC_OscConfig+0x9c>
 80012d2:	4b81      	ldr	r3, [pc, #516]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a80      	ldr	r2, [pc, #512]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80012d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012dc:	6013      	str	r3, [r2, #0]
 80012de:	4b7e      	ldr	r3, [pc, #504]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a7d      	ldr	r2, [pc, #500]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80012e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	e01d      	b.n	8001328 <HAL_RCC_OscConfig+0xd8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012f4:	d10c      	bne.n	8001310 <HAL_RCC_OscConfig+0xc0>
 80012f6:	4b78      	ldr	r3, [pc, #480]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a77      	ldr	r2, [pc, #476]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80012fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b75      	ldr	r3, [pc, #468]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a74      	ldr	r2, [pc, #464]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	e00b      	b.n	8001328 <HAL_RCC_OscConfig+0xd8>
 8001310:	4b71      	ldr	r3, [pc, #452]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a70      	ldr	r2, [pc, #448]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b6e      	ldr	r3, [pc, #440]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a6d      	ldr	r2, [pc, #436]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d013      	beq.n	8001358 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fc36 	bl	8000ba0 <HAL_GetTick>
 8001334:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001338:	f7ff fc32 	bl	8000ba0 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b64      	cmp	r3, #100	@ 0x64
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e3d4      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800134a:	4b63      	ldr	r3, [pc, #396]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0xe8>
 8001356:	e014      	b.n	8001382 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fc22 	bl	8000ba0 <HAL_GetTick>
 800135c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fc1e 	bl	8000ba0 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	@ 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e3c0      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001372:	4b59      	ldr	r3, [pc, #356]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x110>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80ca 	beq.w	8001524 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001390:	4b51      	ldr	r3, [pc, #324]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001398:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800139a:	4b4f      	ldr	r3, [pc, #316]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 800139c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <HAL_RCC_OscConfig+0x166>
 80013a6:	6a3b      	ldr	r3, [r7, #32]
 80013a8:	2b18      	cmp	r3, #24
 80013aa:	d156      	bne.n	800145a <HAL_RCC_OscConfig+0x20a>
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d151      	bne.n	800145a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013b6:	4b48      	ldr	r3, [pc, #288]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <HAL_RCC_OscConfig+0x17e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e392      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013ce:	4b42      	ldr	r3, [pc, #264]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 0219 	bic.w	r2, r3, #25
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	493f      	ldr	r1, [pc, #252]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff fbde 	bl	8000ba0 <HAL_GetTick>
 80013e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fbda 	bl	8000ba0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e37c      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fa:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001406:	f7ff fbfb 	bl	8000c00 <HAL_GetREVID>
 800140a:	4603      	mov	r3, r0
 800140c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001410:	4293      	cmp	r3, r2
 8001412:	d817      	bhi.n	8001444 <HAL_RCC_OscConfig+0x1f4>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b40      	cmp	r3, #64	@ 0x40
 800141a:	d108      	bne.n	800142e <HAL_RCC_OscConfig+0x1de>
 800141c:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001424:	4a2c      	ldr	r2, [pc, #176]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800142a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800142c:	e07a      	b.n	8001524 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b2a      	ldr	r3, [pc, #168]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	031b      	lsls	r3, r3, #12
 800143c:	4926      	ldr	r1, [pc, #152]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 800143e:	4313      	orrs	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001442:	e06f      	b.n	8001524 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b24      	ldr	r3, [pc, #144]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	061b      	lsls	r3, r3, #24
 8001452:	4921      	ldr	r1, [pc, #132]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001458:	e064      	b.n	8001524 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d047      	beq.n	80014f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 0219 	bic.w	r2, r3, #25
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	491a      	ldr	r1, [pc, #104]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fb94 	bl	8000ba0 <HAL_GetTick>
 8001478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fb90 	bl	8000ba0 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e332      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0f0      	beq.n	800147c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	f7ff fbb1 	bl	8000c00 <HAL_GetREVID>
 800149e:	4603      	mov	r3, r0
 80014a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d819      	bhi.n	80014dc <HAL_RCC_OscConfig+0x28c>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	2b40      	cmp	r3, #64	@ 0x40
 80014ae:	d108      	bne.n	80014c2 <HAL_RCC_OscConfig+0x272>
 80014b0:	4b09      	ldr	r3, [pc, #36]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80014b8:	4a07      	ldr	r2, [pc, #28]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80014ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014be:	6053      	str	r3, [r2, #4]
 80014c0:	e030      	b.n	8001524 <HAL_RCC_OscConfig+0x2d4>
 80014c2:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	031b      	lsls	r3, r3, #12
 80014d0:	4901      	ldr	r1, [pc, #4]	@ (80014d8 <HAL_RCC_OscConfig+0x288>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	604b      	str	r3, [r1, #4]
 80014d6:	e025      	b.n	8001524 <HAL_RCC_OscConfig+0x2d4>
 80014d8:	58024400 	.word	0x58024400
 80014dc:	4b9a      	ldr	r3, [pc, #616]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	061b      	lsls	r3, r3, #24
 80014ea:	4997      	ldr	r1, [pc, #604]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e018      	b.n	8001524 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f2:	4b95      	ldr	r3, [pc, #596]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a94      	ldr	r2, [pc, #592]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb4f 	bl	8000ba0 <HAL_GetTick>
 8001502:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fb4b 	bl	8000ba0 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e2ed      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001518:	4b8b      	ldr	r3, [pc, #556]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80a9 	beq.w	8001684 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001532:	4b85      	ldr	r3, [pc, #532]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800153a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800153c:	4b82      	ldr	r3, [pc, #520]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800153e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001540:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b08      	cmp	r3, #8
 8001546:	d007      	beq.n	8001558 <HAL_RCC_OscConfig+0x308>
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b18      	cmp	r3, #24
 800154c:	d13a      	bne.n	80015c4 <HAL_RCC_OscConfig+0x374>
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d135      	bne.n	80015c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001558:	4b7b      	ldr	r3, [pc, #492]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d005      	beq.n	8001570 <HAL_RCC_OscConfig+0x320>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	2b80      	cmp	r3, #128	@ 0x80
 800156a:	d001      	beq.n	8001570 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e2c1      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001570:	f7ff fb46 	bl	8000c00 <HAL_GetREVID>
 8001574:	4603      	mov	r3, r0
 8001576:	f241 0203 	movw	r2, #4099	@ 0x1003
 800157a:	4293      	cmp	r3, r2
 800157c:	d817      	bhi.n	80015ae <HAL_RCC_OscConfig+0x35e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	2b20      	cmp	r3, #32
 8001584:	d108      	bne.n	8001598 <HAL_RCC_OscConfig+0x348>
 8001586:	4b70      	ldr	r3, [pc, #448]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800158e:	4a6e      	ldr	r2, [pc, #440]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001590:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001594:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001596:	e075      	b.n	8001684 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001598:	4b6b      	ldr	r3, [pc, #428]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	069b      	lsls	r3, r3, #26
 80015a6:	4968      	ldr	r1, [pc, #416]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015ac:	e06a      	b.n	8001684 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015ae:	4b66      	ldr	r3, [pc, #408]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	061b      	lsls	r3, r3, #24
 80015bc:	4962      	ldr	r1, [pc, #392]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015c2:	e05f      	b.n	8001684 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d042      	beq.n	8001652 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015cc:	4b5e      	ldr	r3, [pc, #376]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fae2 	bl	8000ba0 <HAL_GetTick>
 80015dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015e0:	f7ff fade 	bl	8000ba0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e280      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80015f2:	4b55      	ldr	r3, [pc, #340]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015fe:	f7ff faff 	bl	8000c00 <HAL_GetREVID>
 8001602:	4603      	mov	r3, r0
 8001604:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001608:	4293      	cmp	r3, r2
 800160a:	d817      	bhi.n	800163c <HAL_RCC_OscConfig+0x3ec>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	2b20      	cmp	r3, #32
 8001612:	d108      	bne.n	8001626 <HAL_RCC_OscConfig+0x3d6>
 8001614:	4b4c      	ldr	r3, [pc, #304]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800161c:	4a4a      	ldr	r2, [pc, #296]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800161e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001622:	6053      	str	r3, [r2, #4]
 8001624:	e02e      	b.n	8001684 <HAL_RCC_OscConfig+0x434>
 8001626:	4b48      	ldr	r3, [pc, #288]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	069b      	lsls	r3, r3, #26
 8001634:	4944      	ldr	r1, [pc, #272]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
 800163a:	e023      	b.n	8001684 <HAL_RCC_OscConfig+0x434>
 800163c:	4b42      	ldr	r3, [pc, #264]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	061b      	lsls	r3, r3, #24
 800164a:	493f      	ldr	r1, [pc, #252]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800164c:	4313      	orrs	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
 8001650:	e018      	b.n	8001684 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001652:	4b3d      	ldr	r3, [pc, #244]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a3c      	ldr	r2, [pc, #240]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001658:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800165c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165e:	f7ff fa9f 	bl	8000ba0 <HAL_GetTick>
 8001662:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001666:	f7ff fa9b 	bl	8000ba0 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e23d      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001678:	4b33      	ldr	r3, [pc, #204]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b00      	cmp	r3, #0
 800168e:	d036      	beq.n	80016fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d019      	beq.n	80016cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001698:	4b2b      	ldr	r3, [pc, #172]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800169a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800169c:	4a2a      	ldr	r2, [pc, #168]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fa7c 	bl	8000ba0 <HAL_GetTick>
 80016a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ac:	f7ff fa78 	bl	8000ba0 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e21a      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016be:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80016c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x45c>
 80016ca:	e018      	b.n	80016fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80016ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d8:	f7ff fa62 	bl	8000ba0 <HAL_GetTick>
 80016dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e0:	f7ff fa5e 	bl	8000ba0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e200      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 80016f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	2b00      	cmp	r3, #0
 8001708:	d039      	beq.n	800177e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d01c      	beq.n	800174c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001712:	4b0d      	ldr	r3, [pc, #52]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a0c      	ldr	r2, [pc, #48]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001718:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800171c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800171e:	f7ff fa3f 	bl	8000ba0 <HAL_GetTick>
 8001722:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001726:	f7ff fa3b 	bl	8000ba0 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e1dd      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001738:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x4d6>
 8001744:	e01b      	b.n	800177e <HAL_RCC_OscConfig+0x52e>
 8001746:	bf00      	nop
 8001748:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800174c:	4b9b      	ldr	r3, [pc, #620]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a9a      	ldr	r2, [pc, #616]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001752:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001756:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001758:	f7ff fa22 	bl	8000ba0 <HAL_GetTick>
 800175c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001760:	f7ff fa1e 	bl	8000ba0 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1c0      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001772:	4b92      	ldr	r3, [pc, #584]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 8081 	beq.w	800188e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800178c:	4b8c      	ldr	r3, [pc, #560]	@ (80019c0 <HAL_RCC_OscConfig+0x770>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a8b      	ldr	r2, [pc, #556]	@ (80019c0 <HAL_RCC_OscConfig+0x770>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001796:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001798:	f7ff fa02 	bl	8000ba0 <HAL_GetTick>
 800179c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a0:	f7ff f9fe 	bl	8000ba0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	@ 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e1a0      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017b2:	4b83      	ldr	r3, [pc, #524]	@ (80019c0 <HAL_RCC_OscConfig+0x770>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d106      	bne.n	80017d4 <HAL_RCC_OscConfig+0x584>
 80017c6:	4b7d      	ldr	r3, [pc, #500]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ca:	4a7c      	ldr	r2, [pc, #496]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80017d2:	e02d      	b.n	8001830 <HAL_RCC_OscConfig+0x5e0>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x5a6>
 80017dc:	4b77      	ldr	r3, [pc, #476]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e0:	4a76      	ldr	r2, [pc, #472]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e8:	4b74      	ldr	r3, [pc, #464]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ec:	4a73      	ldr	r2, [pc, #460]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80017ee:	f023 0304 	bic.w	r3, r3, #4
 80017f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f4:	e01c      	b.n	8001830 <HAL_RCC_OscConfig+0x5e0>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x5c8>
 80017fe:	4b6f      	ldr	r3, [pc, #444]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001802:	4a6e      	ldr	r2, [pc, #440]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6713      	str	r3, [r2, #112]	@ 0x70
 800180a:	4b6c      	ldr	r3, [pc, #432]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180e:	4a6b      	ldr	r2, [pc, #428]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6713      	str	r3, [r2, #112]	@ 0x70
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0x5e0>
 8001818:	4b68      	ldr	r3, [pc, #416]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	4a67      	ldr	r2, [pc, #412]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	@ 0x70
 8001824:	4b65      	ldr	r3, [pc, #404]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001828:	4a64      	ldr	r2, [pc, #400]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 800182a:	f023 0304 	bic.w	r3, r3, #4
 800182e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d015      	beq.n	8001864 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff f9b2 	bl	8000ba0 <HAL_GetTick>
 800183c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800183e:	e00a      	b.n	8001856 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7ff f9ae 	bl	8000ba0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e14e      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001856:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0ee      	beq.n	8001840 <HAL_RCC_OscConfig+0x5f0>
 8001862:	e014      	b.n	800188e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff f99c 	bl	8000ba0 <HAL_GetTick>
 8001868:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff f998 	bl	8000ba0 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e138      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001882:	4b4e      	ldr	r3, [pc, #312]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1ee      	bne.n	800186c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 812d 	beq.w	8001af2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001898:	4b48      	ldr	r3, [pc, #288]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018a0:	2b18      	cmp	r3, #24
 80018a2:	f000 80bd 	beq.w	8001a20 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	f040 809e 	bne.w	80019ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b0:	4b42      	ldr	r3, [pc, #264]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a41      	ldr	r2, [pc, #260]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80018b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018bc:	f7ff f970 	bl	8000ba0 <HAL_GetTick>
 80018c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f96c 	bl	8000ba0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e10e      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018d6:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018e2:	4b36      	ldr	r3, [pc, #216]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80018e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018e6:	4b37      	ldr	r3, [pc, #220]	@ (80019c4 <HAL_RCC_OscConfig+0x774>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	430a      	orrs	r2, r1
 80018f6:	4931      	ldr	r1, [pc, #196]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001900:	3b01      	subs	r3, #1
 8001902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190a:	3b01      	subs	r3, #1
 800190c:	025b      	lsls	r3, r3, #9
 800190e:	b29b      	uxth	r3, r3
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001916:	3b01      	subs	r3, #1
 8001918:	041b      	lsls	r3, r3, #16
 800191a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001924:	3b01      	subs	r3, #1
 8001926:	061b      	lsls	r3, r3, #24
 8001928:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800192c:	4923      	ldr	r1, [pc, #140]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 800192e:	4313      	orrs	r3, r2
 8001930:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001932:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800193e:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001942:	4b21      	ldr	r3, [pc, #132]	@ (80019c8 <HAL_RCC_OscConfig+0x778>)
 8001944:	4013      	ands	r3, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800194a:	00d2      	lsls	r2, r2, #3
 800194c:	491b      	ldr	r1, [pc, #108]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 800194e:	4313      	orrs	r3, r2
 8001950:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001952:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001956:	f023 020c 	bic.w	r2, r3, #12
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	4917      	ldr	r1, [pc, #92]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001960:	4313      	orrs	r3, r2
 8001962:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001968:	f023 0202 	bic.w	r2, r3, #2
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001970:	4912      	ldr	r1, [pc, #72]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001972:	4313      	orrs	r3, r2
 8001974:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197a:	4a10      	ldr	r2, [pc, #64]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001980:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001986:	4a0d      	ldr	r2, [pc, #52]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800198c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800198e:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001992:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 800199c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800199e:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019a6:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <HAL_RCC_OscConfig+0x76c>)
 80019ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b2:	f7ff f8f5 	bl	8000ba0 <HAL_GetTick>
 80019b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019b8:	e011      	b.n	80019de <HAL_RCC_OscConfig+0x78e>
 80019ba:	bf00      	nop
 80019bc:	58024400 	.word	0x58024400
 80019c0:	58024800 	.word	0x58024800
 80019c4:	fffffc0c 	.word	0xfffffc0c
 80019c8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019cc:	f7ff f8e8 	bl	8000ba0 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e08a      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019de:	4b47      	ldr	r3, [pc, #284]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x77c>
 80019ea:	e082      	b.n	8001af2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ec:	4b43      	ldr	r3, [pc, #268]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a42      	ldr	r2, [pc, #264]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 80019f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f8d2 	bl	8000ba0 <HAL_GetTick>
 80019fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a00:	f7ff f8ce 	bl	8000ba0 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e070      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a12:	4b3a      	ldr	r3, [pc, #232]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f0      	bne.n	8001a00 <HAL_RCC_OscConfig+0x7b0>
 8001a1e:	e068      	b.n	8001af2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a20:	4b36      	ldr	r3, [pc, #216]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 8001a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a24:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a26:	4b35      	ldr	r3, [pc, #212]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d031      	beq.n	8001a98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	f003 0203 	and.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d12a      	bne.n	8001a98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d122      	bne.n	8001a98 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d11a      	bne.n	8001a98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	0a5b      	lsrs	r3, r3, #9
 8001a66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a6e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d111      	bne.n	8001a98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	0c1b      	lsrs	r3, r3, #16
 8001a78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a80:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d108      	bne.n	8001a98 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	0e1b      	lsrs	r3, r3, #24
 8001a8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a92:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d001      	beq.n	8001a9c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e02b      	b.n	8001af4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a9c:	4b17      	ldr	r3, [pc, #92]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aa0:	08db      	lsrs	r3, r3, #3
 8001aa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001aa6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d01f      	beq.n	8001af2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ab2:	4b12      	ldr	r3, [pc, #72]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 8001ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab6:	4a11      	ldr	r2, [pc, #68]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001abe:	f7ff f86f 	bl	8000ba0 <HAL_GetTick>
 8001ac2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ac4:	bf00      	nop
 8001ac6:	f7ff f86b 	bl	8000ba0 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d0f9      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 8001ad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_RCC_OscConfig+0x8b0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ade:	00d2      	lsls	r2, r2, #3
 8001ae0:	4906      	ldr	r1, [pc, #24]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ae6:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 8001ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aea:	4a04      	ldr	r2, [pc, #16]	@ (8001afc <HAL_RCC_OscConfig+0x8ac>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3730      	adds	r7, #48	@ 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	58024400 	.word	0x58024400
 8001b00:	ffff0007 	.word	0xffff0007

08001b04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e19c      	b.n	8001e52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b8a      	ldr	r3, [pc, #552]	@ (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d910      	bls.n	8001b48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b87      	ldr	r3, [pc, #540]	@ (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 020f 	bic.w	r2, r3, #15
 8001b2e:	4985      	ldr	r1, [pc, #532]	@ (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b36:	4b83      	ldr	r3, [pc, #524]	@ (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e184      	b.n	8001e52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d010      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	4b7b      	ldr	r3, [pc, #492]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d908      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b64:	4b78      	ldr	r3, [pc, #480]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	4975      	ldr	r1, [pc, #468]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d010      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	4b70      	ldr	r3, [pc, #448]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d908      	bls.n	8001ba4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b92:	4b6d      	ldr	r3, [pc, #436]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	496a      	ldr	r1, [pc, #424]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699a      	ldr	r2, [r3, #24]
 8001bb4:	4b64      	ldr	r3, [pc, #400]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d908      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bc0:	4b61      	ldr	r3, [pc, #388]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	495e      	ldr	r1, [pc, #376]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d010      	beq.n	8001c00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69da      	ldr	r2, [r3, #28]
 8001be2:	4b59      	ldr	r3, [pc, #356]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d908      	bls.n	8001c00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001bee:	4b56      	ldr	r3, [pc, #344]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4953      	ldr	r1, [pc, #332]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4b4d      	ldr	r3, [pc, #308]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d908      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	f023 020f 	bic.w	r2, r3, #15
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4947      	ldr	r1, [pc, #284]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d055      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c3a:	4b43      	ldr	r3, [pc, #268]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	4940      	ldr	r1, [pc, #256]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c54:	4b3c      	ldr	r3, [pc, #240]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d121      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0f6      	b.n	8001e52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c6c:	4b36      	ldr	r3, [pc, #216]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d115      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e0ea      	b.n	8001e52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c84:	4b30      	ldr	r3, [pc, #192]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d109      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0de      	b.n	8001e52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c94:	4b2c      	ldr	r3, [pc, #176]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0d6      	b.n	8001e52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ca4:	4b28      	ldr	r3, [pc, #160]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f023 0207 	bic.w	r2, r3, #7
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4925      	ldr	r1, [pc, #148]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb6:	f7fe ff73 	bl	8000ba0 <HAL_GetTick>
 8001cba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbe:	f7fe ff6f 	bl	8000ba0 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e0be      	b.n	8001e52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d1eb      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d010      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	4b14      	ldr	r3, [pc, #80]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d208      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f023 020f 	bic.w	r2, r3, #15
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	490e      	ldr	r1, [pc, #56]	@ (8001d48 <HAL_RCC_ClockConfig+0x244>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d14:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d214      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 020f 	bic.w	r2, r3, #15
 8001d2a:	4906      	ldr	r1, [pc, #24]	@ (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d32:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <HAL_RCC_ClockConfig+0x240>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e086      	b.n	8001e52 <HAL_RCC_ClockConfig+0x34e>
 8001d44:	52002000 	.word	0x52002000
 8001d48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d010      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d208      	bcs.n	8001d7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d68:	4b3c      	ldr	r3, [pc, #240]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4939      	ldr	r1, [pc, #228]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d010      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695a      	ldr	r2, [r3, #20]
 8001d8a:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d208      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d96:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	492e      	ldr	r1, [pc, #184]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0310 	and.w	r3, r3, #16
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d010      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	4b28      	ldr	r3, [pc, #160]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d208      	bcs.n	8001dd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001dc4:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	4922      	ldr	r1, [pc, #136]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d010      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d208      	bcs.n	8001e04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001df2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	4917      	ldr	r1, [pc, #92]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e04:	f000 f834 	bl	8001e70 <HAL_RCC_GetSysClockFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	0a1b      	lsrs	r3, r3, #8
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	4912      	ldr	r1, [pc, #72]	@ (8001e60 <HAL_RCC_ClockConfig+0x35c>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	f003 031f 	and.w	r3, r3, #31
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <HAL_RCC_ClockConfig+0x358>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e60 <HAL_RCC_ClockConfig+0x35c>)
 8001e2c:	5cd3      	ldrb	r3, [r2, r3]
 8001e2e:	f003 031f 	and.w	r3, r3, #31
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
 8001e38:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <HAL_RCC_ClockConfig+0x360>)
 8001e3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <HAL_RCC_ClockConfig+0x364>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_RCC_ClockConfig+0x368>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fe60 	bl	8000b0c <HAL_InitTick>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	58024400 	.word	0x58024400
 8001e60:	08003b30 	.word	0x08003b30
 8001e64:	24000004 	.word	0x24000004
 8001e68:	24000000 	.word	0x24000000
 8001e6c:	24000008 	.word	0x24000008

08001e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b089      	sub	sp, #36	@ 0x24
 8001e74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e76:	4bb3      	ldr	r3, [pc, #716]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e7e:	2b18      	cmp	r3, #24
 8001e80:	f200 8155 	bhi.w	800212e <HAL_RCC_GetSysClockFreq+0x2be>
 8001e84:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001ef1 	.word	0x08001ef1
 8001e90:	0800212f 	.word	0x0800212f
 8001e94:	0800212f 	.word	0x0800212f
 8001e98:	0800212f 	.word	0x0800212f
 8001e9c:	0800212f 	.word	0x0800212f
 8001ea0:	0800212f 	.word	0x0800212f
 8001ea4:	0800212f 	.word	0x0800212f
 8001ea8:	0800212f 	.word	0x0800212f
 8001eac:	08001f17 	.word	0x08001f17
 8001eb0:	0800212f 	.word	0x0800212f
 8001eb4:	0800212f 	.word	0x0800212f
 8001eb8:	0800212f 	.word	0x0800212f
 8001ebc:	0800212f 	.word	0x0800212f
 8001ec0:	0800212f 	.word	0x0800212f
 8001ec4:	0800212f 	.word	0x0800212f
 8001ec8:	0800212f 	.word	0x0800212f
 8001ecc:	08001f1d 	.word	0x08001f1d
 8001ed0:	0800212f 	.word	0x0800212f
 8001ed4:	0800212f 	.word	0x0800212f
 8001ed8:	0800212f 	.word	0x0800212f
 8001edc:	0800212f 	.word	0x0800212f
 8001ee0:	0800212f 	.word	0x0800212f
 8001ee4:	0800212f 	.word	0x0800212f
 8001ee8:	0800212f 	.word	0x0800212f
 8001eec:	08001f23 	.word	0x08001f23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ef0:	4b94      	ldr	r3, [pc, #592]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001efc:	4b91      	ldr	r3, [pc, #580]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	08db      	lsrs	r3, r3, #3
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	4a90      	ldr	r2, [pc, #576]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001f0e:	e111      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f10:	4b8d      	ldr	r3, [pc, #564]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f12:	61bb      	str	r3, [r7, #24]
      break;
 8001f14:	e10e      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001f16:	4b8d      	ldr	r3, [pc, #564]	@ (800214c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f18:	61bb      	str	r3, [r7, #24]
      break;
 8001f1a:	e10b      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001f1c:	4b8c      	ldr	r3, [pc, #560]	@ (8002150 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f1e:	61bb      	str	r3, [r7, #24]
      break;
 8001f20:	e108      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f22:	4b88      	ldr	r3, [pc, #544]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001f2c:	4b85      	ldr	r3, [pc, #532]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f38:	4b82      	ldr	r3, [pc, #520]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001f42:	4b80      	ldr	r3, [pc, #512]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f46:	08db      	lsrs	r3, r3, #3
 8001f48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80e1 	beq.w	8002128 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	f000 8083 	beq.w	8002074 <HAL_RCC_GetSysClockFreq+0x204>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	f200 80a1 	bhi.w	80020b8 <HAL_RCC_GetSysClockFreq+0x248>
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x114>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d056      	beq.n	8002030 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f82:	e099      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f84:	4b6f      	ldr	r3, [pc, #444]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d02d      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f90:	4b6c      	ldr	r3, [pc, #432]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	08db      	lsrs	r3, r3, #3
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	4a6b      	ldr	r2, [pc, #428]	@ (8002148 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	ee07 3a90 	vmov	s15, r3
 8001fa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fba:	4b62      	ldr	r3, [pc, #392]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002154 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001fea:	e087      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002158 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ffe:	4b51      	ldr	r3, [pc, #324]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800200e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002012:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002154 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800201a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800201e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800202e:	e065      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	ee07 3a90 	vmov	s15, r3
 8002036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800203a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800215c <HAL_RCC_GetSysClockFreq+0x2ec>
 800203e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002042:	4b40      	ldr	r3, [pc, #256]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800204a:	ee07 3a90 	vmov	s15, r3
 800204e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002052:	ed97 6a02 	vldr	s12, [r7, #8]
 8002056:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002154 <HAL_RCC_GetSysClockFreq+0x2e4>
 800205a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800205e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002062:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800206a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002072:	e043      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	ee07 3a90 	vmov	s15, r3
 800207a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800207e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002160 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002086:	4b2f      	ldr	r3, [pc, #188]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800208e:	ee07 3a90 	vmov	s15, r3
 8002092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002096:	ed97 6a02 	vldr	s12, [r7, #8]
 800209a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002154 <HAL_RCC_GetSysClockFreq+0x2e4>
 800209e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020b6:	e021      	b.n	80020fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	ee07 3a90 	vmov	s15, r3
 80020be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800215c <HAL_RCC_GetSysClockFreq+0x2ec>
 80020c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020d2:	ee07 3a90 	vmov	s15, r3
 80020d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020da:	ed97 6a02 	vldr	s12, [r7, #8]
 80020de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002154 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80020fc:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	0a5b      	lsrs	r3, r3, #9
 8002102:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002106:	3301      	adds	r3, #1
 8002108:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	ee07 3a90 	vmov	s15, r3
 8002110:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002114:	edd7 6a07 	vldr	s13, [r7, #28]
 8002118:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800211c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002120:	ee17 3a90 	vmov	r3, s15
 8002124:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002126:	e005      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	61bb      	str	r3, [r7, #24]
      break;
 800212c:	e002      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002130:	61bb      	str	r3, [r7, #24]
      break;
 8002132:	bf00      	nop
  }

  return sysclockfreq;
 8002134:	69bb      	ldr	r3, [r7, #24]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	58024400 	.word	0x58024400
 8002148:	03d09000 	.word	0x03d09000
 800214c:	003d0900 	.word	0x003d0900
 8002150:	007a1200 	.word	0x007a1200
 8002154:	46000000 	.word	0x46000000
 8002158:	4c742400 	.word	0x4c742400
 800215c:	4a742400 	.word	0x4a742400
 8002160:	4af42400 	.word	0x4af42400

08002164 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002168:	b0ca      	sub	sp, #296	@ 0x128
 800216a:	af00      	add	r7, sp, #0
 800216c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002170:	2300      	movs	r3, #0
 8002172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002176:	2300      	movs	r3, #0
 8002178:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800217c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002184:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002188:	2500      	movs	r5, #0
 800218a:	ea54 0305 	orrs.w	r3, r4, r5
 800218e:	d049      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002194:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002196:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800219a:	d02f      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800219c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80021a0:	d828      	bhi.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80021a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021a6:	d01a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80021a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80021ac:	d822      	bhi.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80021b6:	d007      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021b8:	e01c      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80021ba:	4bb8      	ldr	r3, [pc, #736]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021be:	4ab7      	ldr	r2, [pc, #732]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80021c6:	e01a      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80021c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021cc:	3308      	adds	r3, #8
 80021ce:	2102      	movs	r1, #2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f001 f9d1 	bl	8003578 <RCCEx_PLL2_Config>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80021dc:	e00f      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80021de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80021e2:	3328      	adds	r3, #40	@ 0x28
 80021e4:	2102      	movs	r1, #2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f001 fa78 	bl	80036dc <RCCEx_PLL3_Config>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80021f2:	e004      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80021fa:	e000      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80021fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10a      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002206:	4ba5      	ldr	r3, [pc, #660]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800220a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800220e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002212:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002214:	4aa1      	ldr	r2, [pc, #644]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002216:	430b      	orrs	r3, r1
 8002218:	6513      	str	r3, [r2, #80]	@ 0x50
 800221a:	e003      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800221c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002230:	f04f 0900 	mov.w	r9, #0
 8002234:	ea58 0309 	orrs.w	r3, r8, r9
 8002238:	d047      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800223a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800223e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002240:	2b04      	cmp	r3, #4
 8002242:	d82a      	bhi.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002244:	a201      	add	r2, pc, #4	@ (adr r2, 800224c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	08002261 	.word	0x08002261
 8002250:	0800226f 	.word	0x0800226f
 8002254:	08002285 	.word	0x08002285
 8002258:	080022a3 	.word	0x080022a3
 800225c:	080022a3 	.word	0x080022a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002260:	4b8e      	ldr	r3, [pc, #568]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002264:	4a8d      	ldr	r2, [pc, #564]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800226a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800226c:	e01a      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800226e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002272:	3308      	adds	r3, #8
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f001 f97e 	bl	8003578 <RCCEx_PLL2_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002282:	e00f      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002288:	3328      	adds	r3, #40	@ 0x28
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f001 fa25 	bl	80036dc <RCCEx_PLL3_Config>
 8002292:	4603      	mov	r3, r0
 8002294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002298:	e004      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80022a0:	e000      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80022a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80022a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022ac:	4b7b      	ldr	r3, [pc, #492]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022b0:	f023 0107 	bic.w	r1, r3, #7
 80022b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ba:	4a78      	ldr	r2, [pc, #480]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022bc:	430b      	orrs	r3, r1
 80022be:	6513      	str	r3, [r2, #80]	@ 0x50
 80022c0:	e003      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80022c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80022ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80022d6:	f04f 0b00 	mov.w	fp, #0
 80022da:	ea5a 030b 	orrs.w	r3, sl, fp
 80022de:	d04c      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80022e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80022e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022ea:	d030      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80022ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022f0:	d829      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80022f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80022f4:	d02d      	beq.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80022f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80022f8:	d825      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80022fa:	2b80      	cmp	r3, #128	@ 0x80
 80022fc:	d018      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80022fe:	2b80      	cmp	r3, #128	@ 0x80
 8002300:	d821      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002302:	2b00      	cmp	r3, #0
 8002304:	d002      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002306:	2b40      	cmp	r3, #64	@ 0x40
 8002308:	d007      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800230a:	e01c      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800230c:	4b63      	ldr	r3, [pc, #396]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	4a62      	ldr	r2, [pc, #392]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002318:	e01c      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800231a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800231e:	3308      	adds	r3, #8
 8002320:	2100      	movs	r1, #0
 8002322:	4618      	mov	r0, r3
 8002324:	f001 f928 	bl	8003578 <RCCEx_PLL2_Config>
 8002328:	4603      	mov	r3, r0
 800232a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800232e:	e011      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002334:	3328      	adds	r3, #40	@ 0x28
 8002336:	2100      	movs	r1, #0
 8002338:	4618      	mov	r0, r3
 800233a:	f001 f9cf 	bl	80036dc <RCCEx_PLL3_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002344:	e006      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800234c:	e002      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800234e:	bf00      	nop
 8002350:	e000      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002352:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800235c:	4b4f      	ldr	r3, [pc, #316]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800235e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002360:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236a:	4a4c      	ldr	r2, [pc, #304]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800236c:	430b      	orrs	r3, r1
 800236e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002370:	e003      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800237a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002386:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002390:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002394:	460b      	mov	r3, r1
 8002396:	4313      	orrs	r3, r2
 8002398:	d053      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800239a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800239e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80023a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023a6:	d035      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80023a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80023ac:	d82e      	bhi.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80023ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80023b2:	d031      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80023b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80023b8:	d828      	bhi.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80023ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023be:	d01a      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80023c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023c4:	d822      	bhi.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80023ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80023ce:	d007      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80023d0:	e01c      	b.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023d2:	4b32      	ldr	r3, [pc, #200]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d6:	4a31      	ldr	r2, [pc, #196]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023de:	e01c      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023e4:	3308      	adds	r3, #8
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f001 f8c5 	bl	8003578 <RCCEx_PLL2_Config>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80023f4:	e011      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80023fa:	3328      	adds	r3, #40	@ 0x28
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f001 f96c 	bl	80036dc <RCCEx_PLL3_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800240a:	e006      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002412:	e002      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002414:	bf00      	nop
 8002416:	e000      	b.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002418:	bf00      	nop
    }

    if (ret == HAL_OK)
 800241a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002422:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800242a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800242e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002432:	4a1a      	ldr	r2, [pc, #104]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002434:	430b      	orrs	r3, r1
 8002436:	6593      	str	r3, [r2, #88]	@ 0x58
 8002438:	e003      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800243a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800243e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800244e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002452:	2300      	movs	r3, #0
 8002454:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002458:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800245c:	460b      	mov	r3, r1
 800245e:	4313      	orrs	r3, r2
 8002460:	d056      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002466:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800246a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800246e:	d038      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002470:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002474:	d831      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002476:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800247a:	d034      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800247c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002480:	d82b      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002482:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002486:	d01d      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002488:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800248c:	d825      	bhi.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002492:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002498:	e01f      	b.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800249a:	bf00      	nop
 800249c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024a0:	4ba2      	ldr	r3, [pc, #648]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a4:	4aa1      	ldr	r2, [pc, #644]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024ac:	e01c      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024b2:	3308      	adds	r3, #8
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f001 f85e 	bl	8003578 <RCCEx_PLL2_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80024c2:	e011      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024c8:	3328      	adds	r3, #40	@ 0x28
 80024ca:	2100      	movs	r1, #0
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 f905 	bl	80036dc <RCCEx_PLL3_Config>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024d8:	e006      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80024e0:	e002      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80024e2:	bf00      	nop
 80024e4:	e000      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80024e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80024f0:	4b8e      	ldr	r3, [pc, #568]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80024f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002500:	4a8a      	ldr	r2, [pc, #552]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002502:	430b      	orrs	r3, r1
 8002504:	6593      	str	r3, [r2, #88]	@ 0x58
 8002506:	e003      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002508:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800250c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002510:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800251c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002520:	2300      	movs	r3, #0
 8002522:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002526:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800252a:	460b      	mov	r3, r1
 800252c:	4313      	orrs	r3, r2
 800252e:	d03a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002536:	2b30      	cmp	r3, #48	@ 0x30
 8002538:	d01f      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800253a:	2b30      	cmp	r3, #48	@ 0x30
 800253c:	d819      	bhi.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800253e:	2b20      	cmp	r3, #32
 8002540:	d00c      	beq.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002542:	2b20      	cmp	r3, #32
 8002544:	d815      	bhi.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d019      	beq.n	800257e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800254a:	2b10      	cmp	r3, #16
 800254c:	d111      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800254e:	4b77      	ldr	r3, [pc, #476]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002552:	4a76      	ldr	r2, [pc, #472]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002554:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002558:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800255a:	e011      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800255c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002560:	3308      	adds	r3, #8
 8002562:	2102      	movs	r1, #2
 8002564:	4618      	mov	r0, r3
 8002566:	f001 f807 	bl	8003578 <RCCEx_PLL2_Config>
 800256a:	4603      	mov	r3, r0
 800256c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002570:	e006      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002578:	e002      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800257a:	bf00      	nop
 800257c:	e000      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800257e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002588:	4b68      	ldr	r3, [pc, #416]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800258a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002596:	4a65      	ldr	r2, [pc, #404]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002598:	430b      	orrs	r3, r1
 800259a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800259c:	e003      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800259e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80025a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80025a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80025b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80025b6:	2300      	movs	r3, #0
 80025b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80025bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4313      	orrs	r3, r2
 80025c4:	d051      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80025c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025d0:	d035      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80025d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025d6:	d82e      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80025d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80025dc:	d031      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80025de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80025e2:	d828      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80025e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e8:	d01a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80025ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ee:	d822      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80025f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025f8:	d007      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80025fa:	e01c      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025fc:	4b4b      	ldr	r3, [pc, #300]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	4a4a      	ldr	r2, [pc, #296]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002608:	e01c      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800260a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800260e:	3308      	adds	r3, #8
 8002610:	2100      	movs	r1, #0
 8002612:	4618      	mov	r0, r3
 8002614:	f000 ffb0 	bl	8003578 <RCCEx_PLL2_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800261e:	e011      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002624:	3328      	adds	r3, #40	@ 0x28
 8002626:	2100      	movs	r1, #0
 8002628:	4618      	mov	r0, r3
 800262a:	f001 f857 	bl	80036dc <RCCEx_PLL3_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002634:	e006      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800263c:	e002      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800263e:	bf00      	nop
 8002640:	e000      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800264c:	4b37      	ldr	r3, [pc, #220]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800264e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002650:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265a:	4a34      	ldr	r2, [pc, #208]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800265c:	430b      	orrs	r3, r1
 800265e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002660:	e003      	b.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800266a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002676:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800267a:	2300      	movs	r3, #0
 800267c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002680:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002684:	460b      	mov	r3, r1
 8002686:	4313      	orrs	r3, r2
 8002688:	d056      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800268a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800268e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002694:	d033      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002696:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800269a:	d82c      	bhi.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800269c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026a0:	d02f      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80026a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80026a6:	d826      	bhi.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80026a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026ac:	d02b      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80026ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026b2:	d820      	bhi.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80026b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026b8:	d012      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80026ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80026be:	d81a      	bhi.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d022      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c8:	d115      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80026ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ce:	3308      	adds	r3, #8
 80026d0:	2101      	movs	r1, #1
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 ff50 	bl	8003578 <RCCEx_PLL2_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80026de:	e015      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80026e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e4:	3328      	adds	r3, #40	@ 0x28
 80026e6:	2101      	movs	r1, #1
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fff7 	bl	80036dc <RCCEx_PLL3_Config>
 80026ee:	4603      	mov	r3, r0
 80026f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80026f4:	e00a      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026fc:	e006      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80026fe:	bf00      	nop
 8002700:	e004      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002702:	bf00      	nop
 8002704:	e002      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002706:	bf00      	nop
 8002708:	e000      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800270a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800270c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10d      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002714:	4b05      	ldr	r3, [pc, #20]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002718:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800271c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002722:	4a02      	ldr	r2, [pc, #8]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002724:	430b      	orrs	r3, r1
 8002726:	6513      	str	r3, [r2, #80]	@ 0x50
 8002728:	e006      	b.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800272a:	bf00      	nop
 800272c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002730:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002734:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002744:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002748:	2300      	movs	r3, #0
 800274a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800274e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002752:	460b      	mov	r3, r1
 8002754:	4313      	orrs	r3, r2
 8002756:	d055      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002760:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002764:	d033      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002766:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800276a:	d82c      	bhi.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002770:	d02f      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002772:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002776:	d826      	bhi.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002778:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800277c:	d02b      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800277e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002782:	d820      	bhi.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002784:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002788:	d012      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800278a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800278e:	d81a      	bhi.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d022      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002798:	d115      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800279a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800279e:	3308      	adds	r3, #8
 80027a0:	2101      	movs	r1, #1
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fee8 	bl	8003578 <RCCEx_PLL2_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80027ae:	e015      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80027b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027b4:	3328      	adds	r3, #40	@ 0x28
 80027b6:	2101      	movs	r1, #1
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 ff8f 	bl	80036dc <RCCEx_PLL3_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80027c4:	e00a      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027cc:	e006      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80027ce:	bf00      	nop
 80027d0:	e004      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80027da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80027e4:	4ba3      	ldr	r3, [pc, #652]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80027ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027f4:	4a9f      	ldr	r2, [pc, #636]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80027f6:	430b      	orrs	r3, r1
 80027f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80027fa:	e003      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002800:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002810:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800281a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800281e:	460b      	mov	r3, r1
 8002820:	4313      	orrs	r3, r2
 8002822:	d037      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800282e:	d00e      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002834:	d816      	bhi.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002836:	2b00      	cmp	r3, #0
 8002838:	d018      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800283a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800283e:	d111      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002840:	4b8c      	ldr	r3, [pc, #560]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002844:	4a8b      	ldr	r2, [pc, #556]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800284a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800284c:	e00f      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800284e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002852:	3308      	adds	r3, #8
 8002854:	2101      	movs	r1, #1
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fe8e 	bl	8003578 <RCCEx_PLL2_Config>
 800285c:	4603      	mov	r3, r0
 800285e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002862:	e004      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800286a:	e000      	b.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800286c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800286e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002876:	4b7f      	ldr	r3, [pc, #508]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002878:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800287a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800287e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002884:	4a7b      	ldr	r2, [pc, #492]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002886:	430b      	orrs	r3, r1
 8002888:	6513      	str	r3, [r2, #80]	@ 0x50
 800288a:	e003      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80028a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80028aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4313      	orrs	r3, r2
 80028b2:	d039      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80028b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d81c      	bhi.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80028be:	a201      	add	r2, pc, #4	@ (adr r2, 80028c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	08002901 	.word	0x08002901
 80028c8:	080028d5 	.word	0x080028d5
 80028cc:	080028e3 	.word	0x080028e3
 80028d0:	08002901 	.word	0x08002901
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d4:	4b67      	ldr	r3, [pc, #412]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	4a66      	ldr	r2, [pc, #408]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80028da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80028e0:	e00f      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e6:	3308      	adds	r3, #8
 80028e8:	2102      	movs	r1, #2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 fe44 	bl	8003578 <RCCEx_PLL2_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80028f6:	e004      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028fe:	e000      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002900:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10a      	bne.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800290a:	4b5a      	ldr	r3, [pc, #360]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	f023 0103 	bic.w	r1, r3, #3
 8002912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002918:	4a56      	ldr	r2, [pc, #344]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800291a:	430b      	orrs	r3, r1
 800291c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800291e:	e003      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002920:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002934:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002938:	2300      	movs	r3, #0
 800293a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800293e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002942:	460b      	mov	r3, r1
 8002944:	4313      	orrs	r3, r2
 8002946:	f000 809f 	beq.w	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800294a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002954:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002956:	f7fe f923 	bl	8000ba0 <HAL_GetTick>
 800295a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800295e:	e00b      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002960:	f7fe f91e 	bl	8000ba0 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b64      	cmp	r3, #100	@ 0x64
 800296e:	d903      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002976:	e005      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002978:	4b3f      	ldr	r3, [pc, #252]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ed      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002988:	2b00      	cmp	r3, #0
 800298a:	d179      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800298c:	4b39      	ldr	r3, [pc, #228]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800298e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002994:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002998:	4053      	eors	r3, r2
 800299a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d015      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a2:	4b34      	ldr	r3, [pc, #208]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029ae:	4b31      	ldr	r3, [pc, #196]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b2:	4a30      	ldr	r2, [pc, #192]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029be:	4a2d      	ldr	r2, [pc, #180]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80029d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029da:	d118      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe f8e0 	bl	8000ba0 <HAL_GetTick>
 80029e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e4:	e00d      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe f8db 	bl	8000ba0 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029f0:	1ad2      	subs	r2, r2, r3
 80029f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d903      	bls.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002a00:	e005      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a02:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0eb      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d129      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a26:	d10e      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002a38:	091a      	lsrs	r2, r3, #4
 8002a3a:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6113      	str	r3, [r2, #16]
 8002a44:	e005      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002a46:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a4c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a50:	6113      	str	r3, [r2, #16]
 8002a52:	4b08      	ldr	r3, [pc, #32]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a54:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a62:	4a04      	ldr	r2, [pc, #16]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a68:	e00e      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002a72:	e009      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002a74:	58024400 	.word	0x58024400
 8002a78:	58024800 	.word	0x58024800
 8002a7c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f002 0301 	and.w	r3, r2, #1
 8002a94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f000 8089 	beq.w	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002aae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ab0:	2b28      	cmp	r3, #40	@ 0x28
 8002ab2:	d86b      	bhi.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8002abc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002b95 	.word	0x08002b95
 8002ac0:	08002b8d 	.word	0x08002b8d
 8002ac4:	08002b8d 	.word	0x08002b8d
 8002ac8:	08002b8d 	.word	0x08002b8d
 8002acc:	08002b8d 	.word	0x08002b8d
 8002ad0:	08002b8d 	.word	0x08002b8d
 8002ad4:	08002b8d 	.word	0x08002b8d
 8002ad8:	08002b8d 	.word	0x08002b8d
 8002adc:	08002b61 	.word	0x08002b61
 8002ae0:	08002b8d 	.word	0x08002b8d
 8002ae4:	08002b8d 	.word	0x08002b8d
 8002ae8:	08002b8d 	.word	0x08002b8d
 8002aec:	08002b8d 	.word	0x08002b8d
 8002af0:	08002b8d 	.word	0x08002b8d
 8002af4:	08002b8d 	.word	0x08002b8d
 8002af8:	08002b8d 	.word	0x08002b8d
 8002afc:	08002b77 	.word	0x08002b77
 8002b00:	08002b8d 	.word	0x08002b8d
 8002b04:	08002b8d 	.word	0x08002b8d
 8002b08:	08002b8d 	.word	0x08002b8d
 8002b0c:	08002b8d 	.word	0x08002b8d
 8002b10:	08002b8d 	.word	0x08002b8d
 8002b14:	08002b8d 	.word	0x08002b8d
 8002b18:	08002b8d 	.word	0x08002b8d
 8002b1c:	08002b95 	.word	0x08002b95
 8002b20:	08002b8d 	.word	0x08002b8d
 8002b24:	08002b8d 	.word	0x08002b8d
 8002b28:	08002b8d 	.word	0x08002b8d
 8002b2c:	08002b8d 	.word	0x08002b8d
 8002b30:	08002b8d 	.word	0x08002b8d
 8002b34:	08002b8d 	.word	0x08002b8d
 8002b38:	08002b8d 	.word	0x08002b8d
 8002b3c:	08002b95 	.word	0x08002b95
 8002b40:	08002b8d 	.word	0x08002b8d
 8002b44:	08002b8d 	.word	0x08002b8d
 8002b48:	08002b8d 	.word	0x08002b8d
 8002b4c:	08002b8d 	.word	0x08002b8d
 8002b50:	08002b8d 	.word	0x08002b8d
 8002b54:	08002b8d 	.word	0x08002b8d
 8002b58:	08002b8d 	.word	0x08002b8d
 8002b5c:	08002b95 	.word	0x08002b95
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b64:	3308      	adds	r3, #8
 8002b66:	2101      	movs	r1, #1
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fd05 	bl	8003578 <RCCEx_PLL2_Config>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b74:	e00f      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b7a:	3328      	adds	r3, #40	@ 0x28
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 fdac 	bl	80036dc <RCCEx_PLL3_Config>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b8a:	e004      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002b94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10a      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b9e:	4bbf      	ldr	r3, [pc, #764]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002baa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bac:	4abb      	ldr	r2, [pc, #748]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8002bb2:	e003      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f002 0302 	and.w	r3, r2, #2
 8002bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002bd2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	d041      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d824      	bhi.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002be6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bec:	08002c39 	.word	0x08002c39
 8002bf0:	08002c05 	.word	0x08002c05
 8002bf4:	08002c1b 	.word	0x08002c1b
 8002bf8:	08002c39 	.word	0x08002c39
 8002bfc:	08002c39 	.word	0x08002c39
 8002c00:	08002c39 	.word	0x08002c39
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c08:	3308      	adds	r3, #8
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fcb3 	bl	8003578 <RCCEx_PLL2_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c18:	e00f      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c1e:	3328      	adds	r3, #40	@ 0x28
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fd5a 	bl	80036dc <RCCEx_PLL3_Config>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c2e:	e004      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c36:	e000      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10a      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c42:	4b96      	ldr	r3, [pc, #600]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c46:	f023 0107 	bic.w	r1, r3, #7
 8002c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c4e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c50:	4a92      	ldr	r2, [pc, #584]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002c52:	430b      	orrs	r3, r1
 8002c54:	6553      	str	r3, [r2, #84]	@ 0x54
 8002c56:	e003      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	f002 0304 	and.w	r3, r2, #4
 8002c6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	d044      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c88:	2b05      	cmp	r3, #5
 8002c8a:	d825      	bhi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c94 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002ce1 	.word	0x08002ce1
 8002c98:	08002cad 	.word	0x08002cad
 8002c9c:	08002cc3 	.word	0x08002cc3
 8002ca0:	08002ce1 	.word	0x08002ce1
 8002ca4:	08002ce1 	.word	0x08002ce1
 8002ca8:	08002ce1 	.word	0x08002ce1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fc5f 	bl	8003578 <RCCEx_PLL2_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002cc0:	e00f      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc6:	3328      	adds	r3, #40	@ 0x28
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fd06 	bl	80036dc <RCCEx_PLL3_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002cd6:	e004      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cde:	e000      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cea:	4b6c      	ldr	r3, [pc, #432]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	f023 0107 	bic.w	r1, r3, #7
 8002cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cfa:	4a68      	ldr	r2, [pc, #416]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d00:	e003      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f002 0320 	and.w	r3, r2, #32
 8002d16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d24:	460b      	mov	r3, r1
 8002d26:	4313      	orrs	r3, r2
 8002d28:	d055      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d36:	d033      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d3c:	d82c      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d42:	d02f      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d48:	d826      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002d4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d4e:	d02b      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002d50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d54:	d820      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d5a:	d012      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d60:	d81a      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d022      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002d66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d6a:	d115      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d70:	3308      	adds	r3, #8
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fbff 	bl	8003578 <RCCEx_PLL2_Config>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d80:	e015      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d86:	3328      	adds	r3, #40	@ 0x28
 8002d88:	2102      	movs	r1, #2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fca6 	bl	80036dc <RCCEx_PLL3_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d96:	e00a      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d9e:	e006      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002da0:	bf00      	nop
 8002da2:	e004      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002da4:	bf00      	nop
 8002da6:	e002      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002da8:	bf00      	nop
 8002daa:	e000      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10b      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002db6:	4b39      	ldr	r3, [pc, #228]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc6:	4a35      	ldr	r2, [pc, #212]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6553      	str	r3, [r2, #84]	@ 0x54
 8002dcc:	e003      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002dec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4313      	orrs	r3, r2
 8002df4:	d058      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dfe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002e02:	d033      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002e04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002e08:	d82c      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e0e:	d02f      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e14:	d826      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002e16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e1a:	d02b      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002e1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e20:	d820      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002e22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e26:	d012      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002e28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e2c:	d81a      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d022      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e36:	d115      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 fb99 	bl	8003578 <RCCEx_PLL2_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e4c:	e015      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e52:	3328      	adds	r3, #40	@ 0x28
 8002e54:	2102      	movs	r1, #2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fc40 	bl	80036dc <RCCEx_PLL3_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e62:	e00a      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e6a:	e006      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e6c:	bf00      	nop
 8002e6e:	e004      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e70:	bf00      	nop
 8002e72:	e002      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e74:	bf00      	nop
 8002e76:	e000      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8002e78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10e      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e92:	4a02      	ldr	r2, [pc, #8]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e94:	430b      	orrs	r3, r1
 8002e96:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e98:	e006      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8002e9a:	bf00      	nop
 8002e9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002eb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ebe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	d055      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ecc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002ed0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002ed4:	d033      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8002ed6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002eda:	d82c      	bhi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002edc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee0:	d02f      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ee6:	d826      	bhi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002ee8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002eec:	d02b      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8002eee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002ef2:	d820      	bhi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002ef4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ef8:	d012      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8002efa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002efe:	d81a      	bhi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d022      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8002f04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f08:	d115      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0e:	3308      	adds	r3, #8
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fb30 	bl	8003578 <RCCEx_PLL2_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f1e:	e015      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f24:	3328      	adds	r3, #40	@ 0x28
 8002f26:	2102      	movs	r1, #2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fbd7 	bl	80036dc <RCCEx_PLL3_Config>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f34:	e00a      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f3c:	e006      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002f3e:	bf00      	nop
 8002f40:	e004      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8002f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f54:	4ba1      	ldr	r3, [pc, #644]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002f64:	4a9d      	ldr	r2, [pc, #628]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002f66:	430b      	orrs	r3, r1
 8002f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f6a:	e003      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	f002 0308 	and.w	r3, r2, #8
 8002f80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f84:	2300      	movs	r3, #0
 8002f86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4313      	orrs	r3, r2
 8002f92:	d01e      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fa6:	3328      	adds	r3, #40	@ 0x28
 8002fa8:	2102      	movs	r1, #2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fb96 	bl	80036dc <RCCEx_PLL3_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002fbc:	4b87      	ldr	r3, [pc, #540]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fcc:	4a83      	ldr	r2, [pc, #524]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8002fce:	430b      	orrs	r3, r1
 8002fd0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fda:	f002 0310 	and.w	r3, r2, #16
 8002fde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002fe8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002fec:	460b      	mov	r3, r1
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	d01e      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ffe:	d10c      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003004:	3328      	adds	r3, #40	@ 0x28
 8003006:	2102      	movs	r1, #2
 8003008:	4618      	mov	r0, r3
 800300a:	f000 fb67 	bl	80036dc <RCCEx_PLL3_Config>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800301a:	4b70      	ldr	r3, [pc, #448]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003026:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800302a:	4a6c      	ldr	r2, [pc, #432]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800302c:	430b      	orrs	r3, r1
 800302e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003038:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800303c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003040:	2300      	movs	r3, #0
 8003042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003046:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800304a:	460b      	mov	r3, r1
 800304c:	4313      	orrs	r3, r2
 800304e:	d03e      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800305c:	d022      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800305e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003062:	d81b      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003068:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800306c:	d00b      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800306e:	e015      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003074:	3308      	adds	r3, #8
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fa7d 	bl	8003578 <RCCEx_PLL2_Config>
 800307e:	4603      	mov	r3, r0
 8003080:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003084:	e00f      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308a:	3328      	adds	r3, #40	@ 0x28
 800308c:	2102      	movs	r1, #2
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fb24 	bl	80036dc <RCCEx_PLL3_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800309a:	e004      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80030a2:	e000      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80030a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030ae:	4b4b      	ldr	r3, [pc, #300]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80030b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80030be:	4a47      	ldr	r2, [pc, #284]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030c0:	430b      	orrs	r3, r1
 80030c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80030da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80030dc:	2300      	movs	r3, #0
 80030de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030e0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80030e4:	460b      	mov	r3, r1
 80030e6:	4313      	orrs	r3, r2
 80030e8:	d03b      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030f6:	d01f      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80030f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030fc:	d818      	bhi.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80030fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003102:	d003      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003104:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003108:	d007      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800310a:	e011      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800310c:	4b33      	ldr	r3, [pc, #204]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003110:	4a32      	ldr	r2, [pc, #200]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003118:	e00f      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800311a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311e:	3328      	adds	r3, #40	@ 0x28
 8003120:	2101      	movs	r1, #1
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fada 	bl	80036dc <RCCEx_PLL3_Config>
 8003128:	4603      	mov	r3, r0
 800312a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800312e:	e004      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003136:	e000      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800313a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10b      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003142:	4b26      	ldr	r3, [pc, #152]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003146:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800314a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003152:	4a22      	ldr	r2, [pc, #136]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003154:	430b      	orrs	r3, r1
 8003156:	6553      	str	r3, [r2, #84]	@ 0x54
 8003158:	e003      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800315e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800316e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003170:	2300      	movs	r3, #0
 8003172:	677b      	str	r3, [r7, #116]	@ 0x74
 8003174:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003178:	460b      	mov	r3, r1
 800317a:	4313      	orrs	r3, r2
 800317c:	d034      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800318c:	d007      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800318e:	e011      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003190:	4b12      	ldr	r3, [pc, #72]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	4a11      	ldr	r2, [pc, #68]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800319a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800319c:	e00e      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800319e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a2:	3308      	adds	r3, #8
 80031a4:	2102      	movs	r1, #2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 f9e6 	bl	8003578 <RCCEx_PLL2_Config>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031b2:	e003      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10d      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031c4:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031c8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d2:	4a02      	ldr	r2, [pc, #8]	@ (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031d4:	430b      	orrs	r3, r1
 80031d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031d8:	e006      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80031da:	bf00      	nop
 80031dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80031f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031f6:	2300      	movs	r3, #0
 80031f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031fa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80031fe:	460b      	mov	r3, r1
 8003200:	4313      	orrs	r3, r2
 8003202:	d00c      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003208:	3328      	adds	r3, #40	@ 0x28
 800320a:	2102      	movs	r1, #2
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fa65 	bl	80036dc <RCCEx_PLL3_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800321e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800322a:	663b      	str	r3, [r7, #96]	@ 0x60
 800322c:	2300      	movs	r3, #0
 800322e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003230:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003234:	460b      	mov	r3, r1
 8003236:	4313      	orrs	r3, r2
 8003238:	d038      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800323a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003246:	d018      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800324c:	d811      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800324e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003252:	d014      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003258:	d80b      	bhi.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800325a:	2b00      	cmp	r3, #0
 800325c:	d011      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800325e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003262:	d106      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003264:	4bc3      	ldr	r3, [pc, #780]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	4ac2      	ldr	r2, [pc, #776]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800326a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003270:	e008      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003278:	e004      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003284:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10b      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800328c:	4bb9      	ldr	r3, [pc, #740]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800328e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003290:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800329c:	4ab5      	ldr	r2, [pc, #724]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800329e:	430b      	orrs	r3, r1
 80032a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80032a2:	e003      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80032b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032ba:	2300      	movs	r3, #0
 80032bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80032c2:	460b      	mov	r3, r1
 80032c4:	4313      	orrs	r3, r2
 80032c6:	d009      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032c8:	4baa      	ldr	r3, [pc, #680]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80032d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032d6:	4aa7      	ldr	r2, [pc, #668]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032d8:	430b      	orrs	r3, r1
 80032da:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80032dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80032e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80032ea:	2300      	movs	r3, #0
 80032ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80032ee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80032f2:	460b      	mov	r3, r1
 80032f4:	4313      	orrs	r3, r2
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80032f8:	4b9e      	ldr	r3, [pc, #632]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003304:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003308:	4a9a      	ldr	r2, [pc, #616]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800330a:	430b      	orrs	r3, r1
 800330c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800330e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800331a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800331c:	2300      	movs	r3, #0
 800331e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003320:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003324:	460b      	mov	r3, r1
 8003326:	4313      	orrs	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800332a:	4b92      	ldr	r3, [pc, #584]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800332c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800332e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003338:	4a8e      	ldr	r2, [pc, #568]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800333a:	430b      	orrs	r3, r1
 800333c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800334a:	643b      	str	r3, [r7, #64]	@ 0x40
 800334c:	2300      	movs	r3, #0
 800334e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003350:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003354:	460b      	mov	r3, r1
 8003356:	4313      	orrs	r3, r2
 8003358:	d00e      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800335a:	4b86      	ldr	r3, [pc, #536]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	4a85      	ldr	r2, [pc, #532]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003360:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003364:	6113      	str	r3, [r2, #16]
 8003366:	4b83      	ldr	r3, [pc, #524]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003368:	6919      	ldr	r1, [r3, #16]
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003372:	4a80      	ldr	r2, [pc, #512]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003374:	430b      	orrs	r3, r1
 8003376:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003384:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003386:	2300      	movs	r3, #0
 8003388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800338a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800338e:	460b      	mov	r3, r1
 8003390:	4313      	orrs	r3, r2
 8003392:	d009      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003394:	4b77      	ldr	r3, [pc, #476]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003398:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	4a74      	ldr	r2, [pc, #464]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033a4:	430b      	orrs	r3, r1
 80033a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80033b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80033b6:	2300      	movs	r3, #0
 80033b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80033be:	460b      	mov	r3, r1
 80033c0:	4313      	orrs	r3, r2
 80033c2:	d00a      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80033cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033d4:	4a67      	ldr	r2, [pc, #412]	@ (8003574 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80033d6:	430b      	orrs	r3, r1
 80033d8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80033da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e2:	2100      	movs	r1, #0
 80033e4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80033f0:	460b      	mov	r3, r1
 80033f2:	4313      	orrs	r3, r2
 80033f4:	d011      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033fa:	3308      	adds	r3, #8
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f8ba 	bl	8003578 <RCCEx_PLL2_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800340a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	2100      	movs	r1, #0
 8003424:	6239      	str	r1, [r7, #32]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	627b      	str	r3, [r7, #36]	@ 0x24
 800342c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003430:	460b      	mov	r3, r1
 8003432:	4313      	orrs	r3, r2
 8003434:	d011      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343a:	3308      	adds	r3, #8
 800343c:	2101      	movs	r1, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f89a 	bl	8003578 <RCCEx_PLL2_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800344a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003456:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800345a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	2100      	movs	r1, #0
 8003464:	61b9      	str	r1, [r7, #24]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	61fb      	str	r3, [r7, #28]
 800346c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003470:	460b      	mov	r3, r1
 8003472:	4313      	orrs	r3, r2
 8003474:	d011      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	3308      	adds	r3, #8
 800347c:	2102      	movs	r1, #2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f87a 	bl	8003578 <RCCEx_PLL2_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800348a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003496:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800349a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	2100      	movs	r1, #0
 80034a4:	6139      	str	r1, [r7, #16]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	617b      	str	r3, [r7, #20]
 80034ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80034b0:	460b      	mov	r3, r1
 80034b2:	4313      	orrs	r3, r2
 80034b4:	d011      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ba:	3328      	adds	r3, #40	@ 0x28
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f90c 	bl	80036dc <RCCEx_PLL3_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80034ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	2100      	movs	r1, #0
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80034f0:	460b      	mov	r3, r1
 80034f2:	4313      	orrs	r3, r2
 80034f4:	d011      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fa:	3328      	adds	r3, #40	@ 0x28
 80034fc:	2101      	movs	r1, #1
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f8ec 	bl	80036dc <RCCEx_PLL3_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800350a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003516:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	2100      	movs	r1, #0
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003530:	460b      	mov	r3, r1
 8003532:	4313      	orrs	r3, r2
 8003534:	d011      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353a:	3328      	adds	r3, #40	@ 0x28
 800353c:	2102      	movs	r1, #2
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f8cc 	bl	80036dc <RCCEx_PLL3_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800354a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003556:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800355a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
}
 8003568:	4618      	mov	r0, r3
 800356a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800356e:	46bd      	mov	sp, r7
 8003570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003574:	58024400 	.word	0x58024400

08003578 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003586:	4b53      	ldr	r3, [pc, #332]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b03      	cmp	r3, #3
 8003590:	d101      	bne.n	8003596 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e099      	b.n	80036ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003596:	4b4f      	ldr	r3, [pc, #316]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a4e      	ldr	r2, [pc, #312]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 800359c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a2:	f7fd fafd 	bl	8000ba0 <HAL_GetTick>
 80035a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035a8:	e008      	b.n	80035bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035aa:	f7fd faf9 	bl	8000ba0 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e086      	b.n	80036ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035bc:	4b45      	ldr	r3, [pc, #276]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80035c8:	4b42      	ldr	r3, [pc, #264]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	031b      	lsls	r3, r3, #12
 80035d6:	493f      	ldr	r1, [pc, #252]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	628b      	str	r3, [r1, #40]	@ 0x28
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	3b01      	subs	r3, #1
 80035e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	025b      	lsls	r3, r3, #9
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	041b      	lsls	r3, r3, #16
 80035fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	3b01      	subs	r3, #1
 8003606:	061b      	lsls	r3, r3, #24
 8003608:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800360c:	4931      	ldr	r1, [pc, #196]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 800360e:	4313      	orrs	r3, r2
 8003610:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003612:	4b30      	ldr	r3, [pc, #192]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	492d      	ldr	r1, [pc, #180]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003620:	4313      	orrs	r3, r2
 8003622:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003624:	4b2b      	ldr	r3, [pc, #172]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003628:	f023 0220 	bic.w	r2, r3, #32
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	4928      	ldr	r1, [pc, #160]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003632:	4313      	orrs	r3, r2
 8003634:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003636:	4b27      	ldr	r3, [pc, #156]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	4a26      	ldr	r2, [pc, #152]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 800363c:	f023 0310 	bic.w	r3, r3, #16
 8003640:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003642:	4b24      	ldr	r3, [pc, #144]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003644:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003646:	4b24      	ldr	r3, [pc, #144]	@ (80036d8 <RCCEx_PLL2_Config+0x160>)
 8003648:	4013      	ands	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	69d2      	ldr	r2, [r2, #28]
 800364e:	00d2      	lsls	r2, r2, #3
 8003650:	4920      	ldr	r1, [pc, #128]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003652:	4313      	orrs	r3, r2
 8003654:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003656:	4b1f      	ldr	r3, [pc, #124]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365a:	4a1e      	ldr	r2, [pc, #120]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 800365c:	f043 0310 	orr.w	r3, r3, #16
 8003660:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003668:	4b1a      	ldr	r3, [pc, #104]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	4a19      	ldr	r2, [pc, #100]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 800366e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003672:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003674:	e00f      	b.n	8003696 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800367c:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	4a14      	ldr	r2, [pc, #80]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003686:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003688:	e005      	b.n	8003696 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800368a:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	4a11      	ldr	r2, [pc, #68]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003690:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003694:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003696:	4b0f      	ldr	r3, [pc, #60]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a0e      	ldr	r2, [pc, #56]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 800369c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a2:	f7fd fa7d 	bl	8000ba0 <HAL_GetTick>
 80036a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036a8:	e008      	b.n	80036bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80036aa:	f7fd fa79 	bl	8000ba0 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e006      	b.n	80036ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036bc:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <RCCEx_PLL2_Config+0x15c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	58024400 	.word	0x58024400
 80036d8:	ffff0007 	.word	0xffff0007

080036dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80036ea:	4b53      	ldr	r3, [pc, #332]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80036ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d101      	bne.n	80036fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e099      	b.n	800382e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80036fa:	4b4f      	ldr	r3, [pc, #316]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4e      	ldr	r2, [pc, #312]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 8003700:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003706:	f7fd fa4b 	bl	8000ba0 <HAL_GetTick>
 800370a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800370c:	e008      	b.n	8003720 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800370e:	f7fd fa47 	bl	8000ba0 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d901      	bls.n	8003720 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e086      	b.n	800382e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003720:	4b45      	ldr	r3, [pc, #276]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f0      	bne.n	800370e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800372c:	4b42      	ldr	r3, [pc, #264]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	051b      	lsls	r3, r3, #20
 800373a:	493f      	ldr	r1, [pc, #252]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 800373c:	4313      	orrs	r3, r2
 800373e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	3b01      	subs	r3, #1
 8003746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	3b01      	subs	r3, #1
 8003750:	025b      	lsls	r3, r3, #9
 8003752:	b29b      	uxth	r3, r3
 8003754:	431a      	orrs	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	3b01      	subs	r3, #1
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	3b01      	subs	r3, #1
 800376a:	061b      	lsls	r3, r3, #24
 800376c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003770:	4931      	ldr	r1, [pc, #196]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 8003772:	4313      	orrs	r3, r2
 8003774:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003776:	4b30      	ldr	r3, [pc, #192]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	492d      	ldr	r1, [pc, #180]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 8003784:	4313      	orrs	r3, r2
 8003786:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003788:	4b2b      	ldr	r3, [pc, #172]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4928      	ldr	r1, [pc, #160]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800379a:	4b27      	ldr	r3, [pc, #156]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	4a26      	ldr	r2, [pc, #152]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80037a6:	4b24      	ldr	r3, [pc, #144]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037aa:	4b24      	ldr	r3, [pc, #144]	@ (800383c <RCCEx_PLL3_Config+0x160>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	69d2      	ldr	r2, [r2, #28]
 80037b2:	00d2      	lsls	r2, r2, #3
 80037b4:	4920      	ldr	r1, [pc, #128]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80037ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037be:	4a1e      	ldr	r2, [pc, #120]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d106      	bne.n	80037da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80037cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80037d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80037d8:	e00f      	b.n	80037fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d106      	bne.n	80037ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80037e0:	4b15      	ldr	r3, [pc, #84]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	4a14      	ldr	r2, [pc, #80]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80037ec:	e005      	b.n	80037fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80037ee:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f2:	4a11      	ldr	r2, [pc, #68]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80037fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a0e      	ldr	r2, [pc, #56]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 8003800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003806:	f7fd f9cb 	bl	8000ba0 <HAL_GetTick>
 800380a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800380c:	e008      	b.n	8003820 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800380e:	f7fd f9c7 	bl	8000ba0 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e006      	b.n	800382e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003820:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <RCCEx_PLL3_Config+0x15c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	58024400 	.word	0x58024400
 800383c:	ffff0007 	.word	0xffff0007

08003840 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e10f      	b.n	8003a72 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a87      	ldr	r2, [pc, #540]	@ (8003a7c <HAL_SPI_Init+0x23c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00f      	beq.n	8003882 <HAL_SPI_Init+0x42>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a86      	ldr	r2, [pc, #536]	@ (8003a80 <HAL_SPI_Init+0x240>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00a      	beq.n	8003882 <HAL_SPI_Init+0x42>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a84      	ldr	r2, [pc, #528]	@ (8003a84 <HAL_SPI_Init+0x244>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d005      	beq.n	8003882 <HAL_SPI_Init+0x42>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b0f      	cmp	r3, #15
 800387c:	d901      	bls.n	8003882 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0f7      	b.n	8003a72 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f900 	bl	8003a88 <SPI_GetPacketSize>
 8003888:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a7b      	ldr	r2, [pc, #492]	@ (8003a7c <HAL_SPI_Init+0x23c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00c      	beq.n	80038ae <HAL_SPI_Init+0x6e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a79      	ldr	r2, [pc, #484]	@ (8003a80 <HAL_SPI_Init+0x240>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d007      	beq.n	80038ae <HAL_SPI_Init+0x6e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a78      	ldr	r2, [pc, #480]	@ (8003a84 <HAL_SPI_Init+0x244>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d002      	beq.n	80038ae <HAL_SPI_Init+0x6e>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d811      	bhi.n	80038d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80038b2:	4a72      	ldr	r2, [pc, #456]	@ (8003a7c <HAL_SPI_Init+0x23c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a70      	ldr	r2, [pc, #448]	@ (8003a80 <HAL_SPI_Init+0x240>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_SPI_Init+0x8c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6f      	ldr	r2, [pc, #444]	@ (8003a84 <HAL_SPI_Init+0x244>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d104      	bne.n	80038d6 <HAL_SPI_Init+0x96>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b10      	cmp	r3, #16
 80038d0:	d901      	bls.n	80038d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0cd      	b.n	8003a72 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd f810 	bl	8000910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8003912:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800391c:	d119      	bne.n	8003952 <HAL_SPI_Init+0x112>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003926:	d103      	bne.n	8003930 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10c      	bne.n	8003952 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800393c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003940:	d107      	bne.n	8003952 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003950:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00f      	beq.n	800397e <HAL_SPI_Init+0x13e>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b06      	cmp	r3, #6
 8003964:	d90b      	bls.n	800397e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	e007      	b.n	800398e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800398c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	431a      	orrs	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a0:	ea42 0103 	orr.w	r1, r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	431a      	orrs	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ee:	ea42 0103 	orr.w	r1, r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d113      	bne.n	8003a2e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a18:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a2c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0201 	bic.w	r2, r2, #1
 8003a3c:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40013000 	.word	0x40013000
 8003a80:	40003800 	.word	0x40003800
 8003a84:	40003c00 	.word	0x40003c00

08003a88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	3301      	adds	r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	3307      	adds	r3, #7
 8003aa6:	08db      	lsrs	r3, r3, #3
 8003aa8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <memset>:
 8003abe:	4402      	add	r2, r0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d100      	bne.n	8003ac8 <memset+0xa>
 8003ac6:	4770      	bx	lr
 8003ac8:	f803 1b01 	strb.w	r1, [r3], #1
 8003acc:	e7f9      	b.n	8003ac2 <memset+0x4>
	...

08003ad0 <__libc_init_array>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8003b08 <__libc_init_array+0x38>)
 8003ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8003b0c <__libc_init_array+0x3c>)
 8003ad6:	1b64      	subs	r4, r4, r5
 8003ad8:	10a4      	asrs	r4, r4, #2
 8003ada:	2600      	movs	r6, #0
 8003adc:	42a6      	cmp	r6, r4
 8003ade:	d109      	bne.n	8003af4 <__libc_init_array+0x24>
 8003ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8003b10 <__libc_init_array+0x40>)
 8003ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8003b14 <__libc_init_array+0x44>)
 8003ae4:	f000 f818 	bl	8003b18 <_init>
 8003ae8:	1b64      	subs	r4, r4, r5
 8003aea:	10a4      	asrs	r4, r4, #2
 8003aec:	2600      	movs	r6, #0
 8003aee:	42a6      	cmp	r6, r4
 8003af0:	d105      	bne.n	8003afe <__libc_init_array+0x2e>
 8003af2:	bd70      	pop	{r4, r5, r6, pc}
 8003af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003af8:	4798      	blx	r3
 8003afa:	3601      	adds	r6, #1
 8003afc:	e7ee      	b.n	8003adc <__libc_init_array+0xc>
 8003afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b02:	4798      	blx	r3
 8003b04:	3601      	adds	r6, #1
 8003b06:	e7f2      	b.n	8003aee <__libc_init_array+0x1e>
 8003b08:	08003b40 	.word	0x08003b40
 8003b0c:	08003b40 	.word	0x08003b40
 8003b10:	08003b40 	.word	0x08003b40
 8003b14:	08003b44 	.word	0x08003b44

08003b18 <_init>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr

08003b24 <_fini>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	bf00      	nop
 8003b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2a:	bc08      	pop	{r3}
 8003b2c:	469e      	mov	lr, r3
 8003b2e:	4770      	bx	lr
